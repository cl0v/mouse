// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for X11 Test extension.
class X11ExtensionXTest {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  X11ExtensionXTest(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  X11ExtensionXTest.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int _Xmblen(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return __Xmblen(
      str,
      len,
    );
  }

  late final __XmblenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      '_Xmblen');
  late final __Xmblen =
      __XmblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> __Xdebug = _lookup<ffi.Int>('_Xdebug');

  int get _Xdebug => __Xdebug.value;

  set _Xdebug(int value) => __Xdebug.value = value;

  ffi.Pointer<XFontStruct> XLoadQueryFont(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _XLoadQueryFont(
      arg0,
      arg1,
    );
  }

  late final _XLoadQueryFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XFontStruct> Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>>('XLoadQueryFont');
  late final _XLoadQueryFont = _XLoadQueryFontPtr.asFunction<
      ffi.Pointer<XFontStruct> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<XFontStruct> XQueryFont(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XQueryFont(
      arg0,
      arg1,
    );
  }

  late final _XQueryFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XFontStruct> Function(
              ffi.Pointer<Display>, XID)>>('XQueryFont');
  late final _XQueryFont = _XQueryFontPtr.asFunction<
      ffi.Pointer<XFontStruct> Function(ffi.Pointer<Display>, int)>();

  ffi.Pointer<XTimeCoord> XGetMotionEvents(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _XGetMotionEvents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XGetMotionEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XTimeCoord> Function(ffi.Pointer<Display>, Window, Time,
              Time, ffi.Pointer<ffi.Int>)>>('XGetMotionEvents');
  late final _XGetMotionEvents = _XGetMotionEventsPtr.asFunction<
      ffi.Pointer<XTimeCoord> Function(
          ffi.Pointer<Display>, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<XModifierKeymap> XDeleteModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    return _XDeleteModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XDeleteModifiermapEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XModifierKeymap> Function(ffi.Pointer<XModifierKeymap>,
              KeyCode, ffi.Int)>>('XDeleteModifiermapEntry');
  late final _XDeleteModifiermapEntry = _XDeleteModifiermapEntryPtr.asFunction<
      ffi.Pointer<XModifierKeymap> Function(
          ffi.Pointer<XModifierKeymap>, int, int)>();

  ffi.Pointer<XModifierKeymap> XGetModifierMapping(
    ffi.Pointer<Display> arg0,
  ) {
    return _XGetModifierMapping(
      arg0,
    );
  }

  late final _XGetModifierMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XModifierKeymap> Function(
              ffi.Pointer<Display>)>>('XGetModifierMapping');
  late final _XGetModifierMapping = _XGetModifierMappingPtr.asFunction<
      ffi.Pointer<XModifierKeymap> Function(ffi.Pointer<Display>)>();

  ffi.Pointer<XModifierKeymap> XInsertModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    return _XInsertModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XInsertModifiermapEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XModifierKeymap> Function(ffi.Pointer<XModifierKeymap>,
              KeyCode, ffi.Int)>>('XInsertModifiermapEntry');
  late final _XInsertModifiermapEntry = _XInsertModifiermapEntryPtr.asFunction<
      ffi.Pointer<XModifierKeymap> Function(
          ffi.Pointer<XModifierKeymap>, int, int)>();

  ffi.Pointer<XModifierKeymap> XNewModifiermap(
    int arg0,
  ) {
    return _XNewModifiermap(
      arg0,
    );
  }

  late final _XNewModifiermapPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<XModifierKeymap> Function(ffi.Int)>>(
      'XNewModifiermap');
  late final _XNewModifiermap = _XNewModifiermapPtr.asFunction<
      ffi.Pointer<XModifierKeymap> Function(int)>();

  ffi.Pointer<XImage> XCreateImage(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<Visual> arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    return _XCreateImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _XCreateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XImage> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<Visual>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('XCreateImage');
  late final _XCreateImage = _XCreateImagePtr.asFunction<
      ffi.Pointer<XImage> Function(ffi.Pointer<Display>, ffi.Pointer<Visual>,
          int, int, int, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  int XInitImage(
    ffi.Pointer<XImage> arg0,
  ) {
    return _XInitImage(
      arg0,
    );
  }

  late final _XInitImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<XImage>)>>(
          'XInitImage');
  late final _XInitImage =
      _XInitImagePtr.asFunction<int Function(ffi.Pointer<XImage>)>();

  ffi.Pointer<XImage> XGetImage(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    return _XGetImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XGetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XImage> Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedLong,
              ffi.Int)>>('XGetImage');
  late final _XGetImage = _XGetImagePtr.asFunction<
      ffi.Pointer<XImage> Function(
          ffi.Pointer<Display>, int, int, int, int, int, int, int)>();

  ffi.Pointer<XImage> XGetSubImage(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XImage> arg8,
    int arg9,
    int arg10,
  ) {
    return _XGetSubImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _XGetSubImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XImage> Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedLong,
              ffi.Int,
              ffi.Pointer<XImage>,
              ffi.Int,
              ffi.Int)>>('XGetSubImage');
  late final _XGetSubImage = _XGetSubImagePtr.asFunction<
      ffi.Pointer<XImage> Function(ffi.Pointer<Display>, int, int, int, int,
          int, int, int, ffi.Pointer<XImage>, int, int)>();

  ffi.Pointer<Display> XOpenDisplay(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _XOpenDisplay(
      arg0,
    );
  }

  late final _XOpenDisplayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Display> Function(
              ffi.Pointer<ffi.Char>)>>('XOpenDisplay');
  late final _XOpenDisplay = _XOpenDisplayPtr.asFunction<
      ffi.Pointer<Display> Function(ffi.Pointer<ffi.Char>)>();

  void XrmInitialize() {
    return _XrmInitialize();
  }

  late final _XrmInitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('XrmInitialize');
  late final _XrmInitialize = _XrmInitializePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> XFetchBytes(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _XFetchBytes(
      arg0,
      arg1,
    );
  }

  late final _XFetchBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('XFetchBytes');
  late final _XFetchBytes = _XFetchBytesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> XFetchBuffer(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _XFetchBuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XFetchBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('XFetchBuffer');
  late final _XFetchBuffer = _XFetchBufferPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<ffi.Char> XGetAtomName(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XGetAtomName(
      arg0,
      arg1,
    );
  }

  late final _XGetAtomNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Display>, Atom)>>('XGetAtomName');
  late final _XGetAtomName = _XGetAtomNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>, int)>();

  int XGetAtomNames(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<Atom> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
  ) {
    return _XGetAtomNames(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetAtomNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<Atom>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XGetAtomNames');
  late final _XGetAtomNames = _XGetAtomNamesPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<Atom>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> XGetDefault(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _XGetDefault(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('XGetDefault');
  late final _XGetDefault = _XGetDefaultPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> XDisplayName(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _XDisplayName(
      arg0,
    );
  }

  late final _XDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('XDisplayName');
  late final _XDisplayName = _XDisplayNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> XKeysymToString(
    int arg0,
  ) {
    return _XKeysymToString(
      arg0,
    );
  }

  late final _XKeysymToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(KeySym)>>(
          'XKeysymToString');
  late final _XKeysymToString =
      _XKeysymToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>
      XSynchronize(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XSynchronize(
      arg0,
      arg1,
    );
  }

  late final _XSynchronizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>
              Function(ffi.Pointer<Display>, ffi.Int)>>('XSynchronize');
  late final _XSynchronize = _XSynchronizePtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>
          Function(ffi.Pointer<Display>, int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>
      XSetAfterFunction(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>
        arg1,
  ) {
    return _XSetAfterFunction(
      arg0,
      arg1,
    );
  }

  late final _XSetAfterFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<Display>)>>)>>('XSetAfterFunction');
  late final _XSetAfterFunction = _XSetAfterFunctionPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>> Function(
          ffi.Pointer<Display>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>)>();

  int XInternAtom(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _XInternAtom(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XInternAtomPtr = _lookup<
      ffi.NativeFunction<
          Atom Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XInternAtom');
  late final _XInternAtom = _XInternAtomPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>, int)>();

  int XInternAtoms(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<Atom> arg4,
  ) {
    return _XInternAtoms(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XInternAtomsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<Atom>)>>('XInternAtoms');
  late final _XInternAtoms = _XInternAtomsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, int, ffi.Pointer<Atom>)>();

  int XCopyColormapAndFree(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XCopyColormapAndFree(
      arg0,
      arg1,
    );
  }

  late final _XCopyColormapAndFreePtr = _lookup<
          ffi
          .NativeFunction<Colormap Function(ffi.Pointer<Display>, Colormap)>>(
      'XCopyColormapAndFree');
  late final _XCopyColormapAndFree = _XCopyColormapAndFreePtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XCreateColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Visual> arg2,
    int arg3,
  ) {
    return _XCreateColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCreateColormapPtr = _lookup<
      ffi.NativeFunction<
          Colormap Function(ffi.Pointer<Display>, Window, ffi.Pointer<Visual>,
              ffi.Int)>>('XCreateColormap');
  late final _XCreateColormap = _XCreateColormapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<Visual>, int)>();

  int XCreatePixmapCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
    int arg5,
    int arg6,
  ) {
    return _XCreatePixmapCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XCreatePixmapCursorPtr = _lookup<
      ffi.NativeFunction<
          Cursor Function(
              ffi.Pointer<Display>,
              Pixmap,
              Pixmap,
              ffi.Pointer<XColor>,
              ffi.Pointer<XColor>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('XCreatePixmapCursor');
  late final _XCreatePixmapCursor = _XCreatePixmapCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, ffi.Pointer<XColor>,
          ffi.Pointer<XColor>, int, int)>();

  int XCreateGlyphCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XColor> arg5,
    ffi.Pointer<XColor> arg6,
  ) {
    return _XCreateGlyphCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XCreateGlyphCursorPtr = _lookup<
      ffi.NativeFunction<
          Cursor Function(
              ffi.Pointer<Display>,
              Font,
              Font,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<XColor>,
              ffi.Pointer<XColor>)>>('XCreateGlyphCursor');
  late final _XCreateGlyphCursor = _XCreateGlyphCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int,
          ffi.Pointer<XColor>, ffi.Pointer<XColor>)>();

  int XCreateFontCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XCreateFontCursor(
      arg0,
      arg1,
    );
  }

  late final _XCreateFontCursorPtr = _lookup<
      ffi.NativeFunction<
          Cursor Function(
              ffi.Pointer<Display>, ffi.UnsignedInt)>>('XCreateFontCursor');
  late final _XCreateFontCursor = _XCreateFontCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XLoadFont(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _XLoadFont(
      arg0,
      arg1,
    );
  }

  late final _XLoadFontPtr = _lookup<
      ffi.NativeFunction<
          Font Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>>('XLoadFont');
  late final _XLoadFont = _XLoadFontPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>();

  GC XCreateGC(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    return _XCreateGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCreateGCPtr = _lookup<
      ffi.NativeFunction<
          GC Function(ffi.Pointer<Display>, Drawable, ffi.UnsignedLong,
              ffi.Pointer<XGCValues>)>>('XCreateGC');
  late final _XCreateGC = _XCreateGCPtr.asFunction<
      GC Function(ffi.Pointer<Display>, int, int, ffi.Pointer<XGCValues>)>();

  int XGContextFromGC(
    GC arg0,
  ) {
    return _XGContextFromGC(
      arg0,
    );
  }

  late final _XGContextFromGCPtr =
      _lookup<ffi.NativeFunction<GContext Function(GC)>>('XGContextFromGC');
  late final _XGContextFromGC =
      _XGContextFromGCPtr.asFunction<int Function(GC)>();

  void XFlushGC(
    ffi.Pointer<Display> arg0,
    GC arg1,
  ) {
    return _XFlushGC(
      arg0,
      arg1,
    );
  }

  late final _XFlushGCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Display>, GC)>>(
          'XFlushGC');
  late final _XFlushGC =
      _XFlushGCPtr.asFunction<void Function(ffi.Pointer<Display>, GC)>();

  int XCreatePixmap(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XCreatePixmap(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XCreatePixmapPtr = _lookup<
      ffi.NativeFunction<
          Pixmap Function(ffi.Pointer<Display>, Drawable, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('XCreatePixmap');
  late final _XCreatePixmap = _XCreatePixmapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int)>();

  int XCreateBitmapFromData(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
  ) {
    return _XCreateBitmapFromData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XCreateBitmapFromDataPtr = _lookup<
      ffi.NativeFunction<
          Pixmap Function(ffi.Pointer<Display>, Drawable, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('XCreateBitmapFromData');
  late final _XCreateBitmapFromData = _XCreateBitmapFromDataPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>, int, int)>();

  int XCreatePixmapFromBitmapData(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    return _XCreatePixmapFromBitmapData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XCreatePixmapFromBitmapDataPtr = _lookup<
      ffi.NativeFunction<
          Pixmap Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedLong,
              ffi.UnsignedLong,
              ffi.UnsignedInt)>>('XCreatePixmapFromBitmapData');
  late final _XCreatePixmapFromBitmapData =
      _XCreatePixmapFromBitmapDataPtr.asFunction<
          int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>, int,
              int, int, int, int)>();

  int XCreateSimpleWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XCreateSimpleWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XCreateSimpleWindowPtr = _lookup<
      ffi.NativeFunction<
          Window Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedLong,
              ffi.UnsignedLong)>>('XCreateSimpleWindow');
  late final _XCreateSimpleWindow = _XCreateSimpleWindowPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, int, int, int, int, int, int)>();

  int XGetSelectionOwner(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XGetSelectionOwner(
      arg0,
      arg1,
    );
  }

  late final _XGetSelectionOwnerPtr =
      _lookup<ffi.NativeFunction<Window Function(ffi.Pointer<Display>, Atom)>>(
          'XGetSelectionOwner');
  late final _XGetSelectionOwner = _XGetSelectionOwnerPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XCreateWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<Visual> arg9,
    int arg10,
    ffi.Pointer<XSetWindowAttributes> arg11,
  ) {
    return _XCreateWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  late final _XCreateWindowPtr = _lookup<
      ffi.NativeFunction<
          Window Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<Visual>,
              ffi.UnsignedLong,
              ffi.Pointer<XSetWindowAttributes>)>>('XCreateWindow');
  late final _XCreateWindow = _XCreateWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int, int, int, int,
          ffi.Pointer<Visual>, int, ffi.Pointer<XSetWindowAttributes>)>();

  ffi.Pointer<Colormap> XListInstalledColormaps(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XListInstalledColormaps(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XListInstalledColormapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Colormap> Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Int>)>>('XListInstalledColormaps');
  late final _XListInstalledColormaps = _XListInstalledColormapsPtr.asFunction<
      ffi.Pointer<Colormap> Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> XListFonts(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XListFonts(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XListFontsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('XListFonts');
  late final _XListFonts = _XListFontsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<Display>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> XListFontsWithInfo(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
  ) {
    return _XListFontsWithInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XListFontsWithInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<XFontStruct>>)>>('XListFontsWithInfo');
  late final _XListFontsWithInfo = _XListFontsWithInfoPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<Display>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<XFontStruct>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> XGetFontPath(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _XGetFontPath(
      arg0,
      arg1,
    );
  }

  late final _XGetFontPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('XGetFontPath');
  late final _XGetFontPath = _XGetFontPathPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> XListExtensions(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _XListExtensions(
      arg0,
      arg1,
    );
  }

  late final _XListExtensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('XListExtensions');
  late final _XListExtensions = _XListExtensionsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<Atom> XListProperties(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XListProperties(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XListPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Atom> Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Int>)>>('XListProperties');
  late final _XListProperties = _XListPropertiesPtr.asFunction<
      ffi.Pointer<Atom> Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<XHostAddress> XListHosts(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XListHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XListHostsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XHostAddress> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('XListHosts');
  late final _XListHosts = _XListHostsPtr.asFunction<
      ffi.Pointer<XHostAddress> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XKeycodeToKeysym(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XKeycodeToKeysym(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XKeycodeToKeysymPtr = _lookup<
      ffi.NativeFunction<
          KeySym Function(
              ffi.Pointer<Display>, KeyCode, ffi.Int)>>('XKeycodeToKeysym');
  late final _XKeycodeToKeysym = _XKeycodeToKeysymPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XLookupKeysym(
    ffi.Pointer<XKeyEvent> arg0,
    int arg1,
  ) {
    return _XLookupKeysym(
      arg0,
      arg1,
    );
  }

  late final _XLookupKeysymPtr = _lookup<
          ffi.NativeFunction<KeySym Function(ffi.Pointer<XKeyEvent>, ffi.Int)>>(
      'XLookupKeysym');
  late final _XLookupKeysym =
      _XLookupKeysymPtr.asFunction<int Function(ffi.Pointer<XKeyEvent>, int)>();

  ffi.Pointer<KeySym> XGetKeyboardMapping(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XGetKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetKeyboardMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KeySym> Function(ffi.Pointer<Display>, KeyCode, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('XGetKeyboardMapping');
  late final _XGetKeyboardMapping = _XGetKeyboardMappingPtr.asFunction<
      ffi.Pointer<KeySym> Function(
          ffi.Pointer<Display>, int, int, ffi.Pointer<ffi.Int>)>();

  int XStringToKeysym(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _XStringToKeysym(
      arg0,
    );
  }

  late final _XStringToKeysymPtr =
      _lookup<ffi.NativeFunction<KeySym Function(ffi.Pointer<ffi.Char>)>>(
          'XStringToKeysym');
  late final _XStringToKeysym =
      _XStringToKeysymPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int XMaxRequestSize(
    ffi.Pointer<Display> arg0,
  ) {
    return _XMaxRequestSize(
      arg0,
    );
  }

  late final _XMaxRequestSizePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<Display>)>>(
          'XMaxRequestSize');
  late final _XMaxRequestSize =
      _XMaxRequestSizePtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XExtendedMaxRequestSize(
    ffi.Pointer<Display> arg0,
  ) {
    return _XExtendedMaxRequestSize(
      arg0,
    );
  }

  late final _XExtendedMaxRequestSizePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<Display>)>>(
          'XExtendedMaxRequestSize');
  late final _XExtendedMaxRequestSize = _XExtendedMaxRequestSizePtr.asFunction<
      int Function(ffi.Pointer<Display>)>();

  ffi.Pointer<ffi.Char> XResourceManagerString(
    ffi.Pointer<Display> arg0,
  ) {
    return _XResourceManagerString(
      arg0,
    );
  }

  late final _XResourceManagerStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Display>)>>('XResourceManagerString');
  late final _XResourceManagerString = _XResourceManagerStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>)>();

  ffi.Pointer<ffi.Char> XScreenResourceString(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XScreenResourceString(
      arg0,
    );
  }

  late final _XScreenResourceStringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<Screen>)>>(
      'XScreenResourceString');
  late final _XScreenResourceString = _XScreenResourceStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Screen>)>();

  int XDisplayMotionBufferSize(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDisplayMotionBufferSize(
      arg0,
    );
  }

  late final _XDisplayMotionBufferSizePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<Display>)>>(
      'XDisplayMotionBufferSize');
  late final _XDisplayMotionBufferSize = _XDisplayMotionBufferSizePtr
      .asFunction<int Function(ffi.Pointer<Display>)>();

  int XVisualIDFromVisual(
    ffi.Pointer<Visual> arg0,
  ) {
    return _XVisualIDFromVisual(
      arg0,
    );
  }

  late final _XVisualIDFromVisualPtr =
      _lookup<ffi.NativeFunction<VisualID Function(ffi.Pointer<Visual>)>>(
          'XVisualIDFromVisual');
  late final _XVisualIDFromVisual =
      _XVisualIDFromVisualPtr.asFunction<int Function(ffi.Pointer<Visual>)>();

  int XInitThreads() {
    return _XInitThreads();
  }

  late final _XInitThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('XInitThreads');
  late final _XInitThreads = _XInitThreadsPtr.asFunction<int Function()>();

  int XFreeThreads() {
    return _XFreeThreads();
  }

  late final _XFreeThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('XFreeThreads');
  late final _XFreeThreads = _XFreeThreadsPtr.asFunction<int Function()>();

  void XLockDisplay(
    ffi.Pointer<Display> arg0,
  ) {
    return _XLockDisplay(
      arg0,
    );
  }

  late final _XLockDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Display>)>>(
          'XLockDisplay');
  late final _XLockDisplay =
      _XLockDisplayPtr.asFunction<void Function(ffi.Pointer<Display>)>();

  void XUnlockDisplay(
    ffi.Pointer<Display> arg0,
  ) {
    return _XUnlockDisplay(
      arg0,
    );
  }

  late final _XUnlockDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Display>)>>(
          'XUnlockDisplay');
  late final _XUnlockDisplay =
      _XUnlockDisplayPtr.asFunction<void Function(ffi.Pointer<Display>)>();

  ffi.Pointer<XExtCodes> XInitExtension(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _XInitExtension(
      arg0,
      arg1,
    );
  }

  late final _XInitExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XExtCodes> Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>>('XInitExtension');
  late final _XInitExtension = _XInitExtensionPtr.asFunction<
      ffi.Pointer<XExtCodes> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<XExtCodes> XAddExtension(
    ffi.Pointer<Display> arg0,
  ) {
    return _XAddExtension(
      arg0,
    );
  }

  late final _XAddExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XExtCodes> Function(
              ffi.Pointer<Display>)>>('XAddExtension');
  late final _XAddExtension = _XAddExtensionPtr.asFunction<
      ffi.Pointer<XExtCodes> Function(ffi.Pointer<Display>)>();

  ffi.Pointer<XExtData> XFindOnExtensionList(
    ffi.Pointer<ffi.Pointer<XExtData>> arg0,
    int arg1,
  ) {
    return _XFindOnExtensionList(
      arg0,
      arg1,
    );
  }

  late final _XFindOnExtensionListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XExtData> Function(ffi.Pointer<ffi.Pointer<XExtData>>,
              ffi.Int)>>('XFindOnExtensionList');
  late final _XFindOnExtensionList = _XFindOnExtensionListPtr.asFunction<
      ffi.Pointer<XExtData> Function(
          ffi.Pointer<ffi.Pointer<XExtData>>, int)>();

  ffi.Pointer<ffi.Pointer<XExtData>> XEHeadOfExtensionList(
    XEDataObject arg0,
  ) {
    return _XEHeadOfExtensionList(
      arg0,
    );
  }

  late final _XEHeadOfExtensionListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<XExtData>> Function(
              XEDataObject)>>('XEHeadOfExtensionList');
  late final _XEHeadOfExtensionList = _XEHeadOfExtensionListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<XExtData>> Function(XEDataObject)>();

  int XRootWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XRootWindow(
      arg0,
      arg1,
    );
  }

  late final _XRootWindowPtr = _lookup<
          ffi.NativeFunction<Window Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XRootWindow');
  late final _XRootWindow =
      _XRootWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDefaultRootWindow(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDefaultRootWindow(
      arg0,
    );
  }

  late final _XDefaultRootWindowPtr =
      _lookup<ffi.NativeFunction<Window Function(ffi.Pointer<Display>)>>(
          'XDefaultRootWindow');
  late final _XDefaultRootWindow =
      _XDefaultRootWindowPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XRootWindowOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XRootWindowOfScreen(
      arg0,
    );
  }

  late final _XRootWindowOfScreenPtr =
      _lookup<ffi.NativeFunction<Window Function(ffi.Pointer<Screen>)>>(
          'XRootWindowOfScreen');
  late final _XRootWindowOfScreen =
      _XRootWindowOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  ffi.Pointer<Visual> XDefaultVisual(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDefaultVisual(
      arg0,
      arg1,
    );
  }

  late final _XDefaultVisualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Visual> Function(
              ffi.Pointer<Display>, ffi.Int)>>('XDefaultVisual');
  late final _XDefaultVisual = _XDefaultVisualPtr.asFunction<
      ffi.Pointer<Visual> Function(ffi.Pointer<Display>, int)>();

  ffi.Pointer<Visual> XDefaultVisualOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDefaultVisualOfScreen(
      arg0,
    );
  }

  late final _XDefaultVisualOfScreenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Visual> Function(ffi.Pointer<Screen>)>>(
      'XDefaultVisualOfScreen');
  late final _XDefaultVisualOfScreen = _XDefaultVisualOfScreenPtr.asFunction<
      ffi.Pointer<Visual> Function(ffi.Pointer<Screen>)>();

  GC XDefaultGC(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDefaultGC(
      arg0,
      arg1,
    );
  }

  late final _XDefaultGCPtr =
      _lookup<ffi.NativeFunction<GC Function(ffi.Pointer<Display>, ffi.Int)>>(
          'XDefaultGC');
  late final _XDefaultGC =
      _XDefaultGCPtr.asFunction<GC Function(ffi.Pointer<Display>, int)>();

  GC XDefaultGCOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDefaultGCOfScreen(
      arg0,
    );
  }

  late final _XDefaultGCOfScreenPtr =
      _lookup<ffi.NativeFunction<GC Function(ffi.Pointer<Screen>)>>(
          'XDefaultGCOfScreen');
  late final _XDefaultGCOfScreen =
      _XDefaultGCOfScreenPtr.asFunction<GC Function(ffi.Pointer<Screen>)>();

  int XBlackPixel(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XBlackPixel(
      arg0,
      arg1,
    );
  }

  late final _XBlackPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<Display>, ffi.Int)>>('XBlackPixel');
  late final _XBlackPixel =
      _XBlackPixelPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XWhitePixel(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XWhitePixel(
      arg0,
      arg1,
    );
  }

  late final _XWhitePixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<Display>, ffi.Int)>>('XWhitePixel');
  late final _XWhitePixel =
      _XWhitePixelPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XAllPlanes() {
    return _XAllPlanes();
  }

  late final _XAllPlanesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('XAllPlanes');
  late final _XAllPlanes = _XAllPlanesPtr.asFunction<int Function()>();

  int XBlackPixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XBlackPixelOfScreen(
      arg0,
    );
  }

  late final _XBlackPixelOfScreenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<Screen>)>>(
      'XBlackPixelOfScreen');
  late final _XBlackPixelOfScreen =
      _XBlackPixelOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XWhitePixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XWhitePixelOfScreen(
      arg0,
    );
  }

  late final _XWhitePixelOfScreenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<Screen>)>>(
      'XWhitePixelOfScreen');
  late final _XWhitePixelOfScreen =
      _XWhitePixelOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XNextRequest(
    ffi.Pointer<Display> arg0,
  ) {
    return _XNextRequest(
      arg0,
    );
  }

  late final _XNextRequestPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<Display>)>>(
      'XNextRequest');
  late final _XNextRequest =
      _XNextRequestPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XLastKnownRequestProcessed(
    ffi.Pointer<Display> arg0,
  ) {
    return _XLastKnownRequestProcessed(
      arg0,
    );
  }

  late final _XLastKnownRequestProcessedPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<Display>)>>(
      'XLastKnownRequestProcessed');
  late final _XLastKnownRequestProcessed = _XLastKnownRequestProcessedPtr
      .asFunction<int Function(ffi.Pointer<Display>)>();

  ffi.Pointer<ffi.Char> XServerVendor(
    ffi.Pointer<Display> arg0,
  ) {
    return _XServerVendor(
      arg0,
    );
  }

  late final _XServerVendorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Display>)>>('XServerVendor');
  late final _XServerVendor = _XServerVendorPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>)>();

  ffi.Pointer<ffi.Char> XDisplayString(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDisplayString(
      arg0,
    );
  }

  late final _XDisplayStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Display>)>>('XDisplayString');
  late final _XDisplayString = _XDisplayStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Display>)>();

  int XDefaultColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDefaultColormap(
      arg0,
      arg1,
    );
  }

  late final _XDefaultColormapPtr = _lookup<
          ffi.NativeFunction<Colormap Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDefaultColormap');
  late final _XDefaultColormap = _XDefaultColormapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XDefaultColormapOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDefaultColormapOfScreen(
      arg0,
    );
  }

  late final _XDefaultColormapOfScreenPtr =
      _lookup<ffi.NativeFunction<Colormap Function(ffi.Pointer<Screen>)>>(
          'XDefaultColormapOfScreen');
  late final _XDefaultColormapOfScreen = _XDefaultColormapOfScreenPtr
      .asFunction<int Function(ffi.Pointer<Screen>)>();

  ffi.Pointer<Display> XDisplayOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDisplayOfScreen(
      arg0,
    );
  }

  late final _XDisplayOfScreenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Display> Function(ffi.Pointer<Screen>)>>(
      'XDisplayOfScreen');
  late final _XDisplayOfScreen = _XDisplayOfScreenPtr.asFunction<
      ffi.Pointer<Display> Function(ffi.Pointer<Screen>)>();

  ffi.Pointer<Screen> XScreenOfDisplay(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XScreenOfDisplay(
      arg0,
      arg1,
    );
  }

  late final _XScreenOfDisplayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Screen> Function(
              ffi.Pointer<Display>, ffi.Int)>>('XScreenOfDisplay');
  late final _XScreenOfDisplay = _XScreenOfDisplayPtr.asFunction<
      ffi.Pointer<Screen> Function(ffi.Pointer<Display>, int)>();

  ffi.Pointer<Screen> XDefaultScreenOfDisplay(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDefaultScreenOfDisplay(
      arg0,
    );
  }

  late final _XDefaultScreenOfDisplayPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Screen> Function(ffi.Pointer<Display>)>>(
      'XDefaultScreenOfDisplay');
  late final _XDefaultScreenOfDisplay = _XDefaultScreenOfDisplayPtr.asFunction<
      ffi.Pointer<Screen> Function(ffi.Pointer<Display>)>();

  int XEventMaskOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XEventMaskOfScreen(
      arg0,
    );
  }

  late final _XEventMaskOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<Screen>)>>(
          'XEventMaskOfScreen');
  late final _XEventMaskOfScreen =
      _XEventMaskOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XScreenNumberOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XScreenNumberOfScreen(
      arg0,
    );
  }

  late final _XScreenNumberOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XScreenNumberOfScreen');
  late final _XScreenNumberOfScreen =
      _XScreenNumberOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  XErrorHandler XSetErrorHandler(
    XErrorHandler arg0,
  ) {
    return _XSetErrorHandler(
      arg0,
    );
  }

  late final _XSetErrorHandlerPtr =
      _lookup<ffi.NativeFunction<XErrorHandler Function(XErrorHandler)>>(
          'XSetErrorHandler');
  late final _XSetErrorHandler =
      _XSetErrorHandlerPtr.asFunction<XErrorHandler Function(XErrorHandler)>();

  XIOErrorHandler XSetIOErrorHandler(
    XIOErrorHandler arg0,
  ) {
    return _XSetIOErrorHandler(
      arg0,
    );
  }

  late final _XSetIOErrorHandlerPtr =
      _lookup<ffi.NativeFunction<XIOErrorHandler Function(XIOErrorHandler)>>(
          'XSetIOErrorHandler');
  late final _XSetIOErrorHandler = _XSetIOErrorHandlerPtr.asFunction<
      XIOErrorHandler Function(XIOErrorHandler)>();

  void XSetIOErrorExitHandler(
    ffi.Pointer<Display> arg0,
    XIOErrorExitHandler arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _XSetIOErrorExitHandler(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetIOErrorExitHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, XIOErrorExitHandler,
              ffi.Pointer<ffi.Void>)>>('XSetIOErrorExitHandler');
  late final _XSetIOErrorExitHandler = _XSetIOErrorExitHandlerPtr.asFunction<
      void Function(
          ffi.Pointer<Display>, XIOErrorExitHandler, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<XPixmapFormatValues> XListPixmapFormats(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _XListPixmapFormats(
      arg0,
      arg1,
    );
  }

  late final _XListPixmapFormatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XPixmapFormatValues> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>)>>('XListPixmapFormats');
  late final _XListPixmapFormats = _XListPixmapFormatsPtr.asFunction<
      ffi.Pointer<XPixmapFormatValues> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> XListDepths(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XListDepths(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XListDepthsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<Display>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('XListDepths');
  late final _XListDepths = _XListDepthsPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Int>)>();

  int XReconfigureWMWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XWindowChanges> arg4,
  ) {
    return _XReconfigureWMWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XReconfigureWMWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<XWindowChanges>)>>('XReconfigureWMWindow');
  late final _XReconfigureWMWindow = _XReconfigureWMWindowPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, int, ffi.Pointer<XWindowChanges>)>();

  int XGetWMProtocols(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<Atom>> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XGetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetWMProtocolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Pointer<ffi.Pointer<Atom>>,
              ffi.Pointer<ffi.Int>)>>('XGetWMProtocols');
  late final _XGetWMProtocols = _XGetWMProtocolsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Pointer<Atom>>,
          ffi.Pointer<ffi.Int>)>();

  int XSetWMProtocols(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Atom> arg2,
    int arg3,
  ) {
    return _XSetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetWMProtocolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Pointer<Atom>,
              ffi.Int)>>('XSetWMProtocols');
  late final _XSetWMProtocols = _XSetWMProtocolsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<Atom>, int)>();

  int XIconifyWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XIconifyWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XIconifyWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int)>>('XIconifyWindow');
  late final _XIconifyWindow = _XIconifyWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XWithdrawWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XWithdrawWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XWithdrawWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int)>>('XWithdrawWindow');
  late final _XWithdrawWindow = _XWithdrawWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XGetCommand(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XGetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>)>>('XGetCommand');
  late final _XGetCommand = _XGetCommandPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Int>)>();

  int XGetWMColormapWindows(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<Window>> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XGetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetWMColormapWindowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Pointer<ffi.Pointer<Window>>,
              ffi.Pointer<ffi.Int>)>>('XGetWMColormapWindows');
  late final _XGetWMColormapWindows = _XGetWMColormapWindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Pointer<Window>>,
          ffi.Pointer<ffi.Int>)>();

  int XSetWMColormapWindows(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Window> arg2,
    int arg3,
  ) {
    return _XSetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetWMColormapWindowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Pointer<Window>,
              ffi.Int)>>('XSetWMColormapWindows');
  late final _XSetWMColormapWindows = _XSetWMColormapWindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<Window>, int)>();

  void XFreeStringList(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _XFreeStringList(
      arg0,
    );
  }

  late final _XFreeStringListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XFreeStringList');
  late final _XFreeStringList = _XFreeStringListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XSetTransientForHint(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetTransientForHintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, Window)>>('XSetTransientForHint');
  late final _XSetTransientForHint = _XSetTransientForHintPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XActivateScreenSaver(
    ffi.Pointer<Display> arg0,
  ) {
    return _XActivateScreenSaver(
      arg0,
    );
  }

  late final _XActivateScreenSaverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XActivateScreenSaver');
  late final _XActivateScreenSaver =
      _XActivateScreenSaverPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XAddHost(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    return _XAddHost(
      arg0,
      arg1,
    );
  }

  late final _XAddHostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XHostAddress>)>>('XAddHost');
  late final _XAddHost = _XAddHostPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>)>();

  int XAddHosts(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    return _XAddHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XAddHostsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>,
              ffi.Int)>>('XAddHosts');
  late final _XAddHosts = _XAddHostsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>, int)>();

  int XAddToExtensionList(
    ffi.Pointer<ffi.Pointer<_XExtData>> arg0,
    ffi.Pointer<XExtData> arg1,
  ) {
    return _XAddToExtensionList(
      arg0,
      arg1,
    );
  }

  late final _XAddToExtensionListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<_XExtData>>,
              ffi.Pointer<XExtData>)>>('XAddToExtensionList');
  late final _XAddToExtensionList = _XAddToExtensionListPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<_XExtData>>, ffi.Pointer<XExtData>)>();

  int XAddToSaveSet(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XAddToSaveSet(
      arg0,
      arg1,
    );
  }

  late final _XAddToSaveSetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XAddToSaveSet');
  late final _XAddToSaveSet =
      _XAddToSaveSetPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XAllocColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    return _XAllocColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XAllocColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap,
              ffi.Pointer<XColor>)>>('XAllocColor');
  late final _XAllocColor = _XAllocColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>)>();

  int XAllocColorCells(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.UnsignedLong> arg3,
    int arg4,
    ffi.Pointer<ffi.UnsignedLong> arg5,
    int arg6,
  ) {
    return _XAllocColorCells(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XAllocColorCellsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt)>>('XAllocColorCells');
  late final _XAllocColorCells = _XAllocColorCellsPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
          int)>();

  int XAllocColorPlanes(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.UnsignedLong> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<ffi.UnsignedLong> arg8,
    ffi.Pointer<ffi.UnsignedLong> arg9,
    ffi.Pointer<ffi.UnsignedLong> arg10,
  ) {
    return _XAllocColorPlanes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _XAllocColorPlanesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('XAllocColorPlanes');
  late final _XAllocColorPlanes = _XAllocColorPlanesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>)>();

  int XAllocNamedColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    return _XAllocNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XAllocNamedColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<XColor>,
              ffi.Pointer<XColor>)>>('XAllocNamedColor');
  late final _XAllocNamedColor = _XAllocNamedColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<XColor>, ffi.Pointer<XColor>)>();

  int XAllowEvents(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XAllowEvents(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XAllowEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Int, Time)>>('XAllowEvents');
  late final _XAllowEvents = _XAllowEventsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XAutoRepeatOff(
    ffi.Pointer<Display> arg0,
  ) {
    return _XAutoRepeatOff(
      arg0,
    );
  }

  late final _XAutoRepeatOffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XAutoRepeatOff');
  late final _XAutoRepeatOff =
      _XAutoRepeatOffPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XAutoRepeatOn(
    ffi.Pointer<Display> arg0,
  ) {
    return _XAutoRepeatOn(
      arg0,
    );
  }

  late final _XAutoRepeatOnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XAutoRepeatOn');
  late final _XAutoRepeatOn =
      _XAutoRepeatOnPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XBell(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XBell(
      arg0,
      arg1,
    );
  }

  late final _XBellPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XBell');
  late final _XBell =
      _XBellPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XBitmapBitOrder(
    ffi.Pointer<Display> arg0,
  ) {
    return _XBitmapBitOrder(
      arg0,
    );
  }

  late final _XBitmapBitOrderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XBitmapBitOrder');
  late final _XBitmapBitOrder =
      _XBitmapBitOrderPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XBitmapPad(
    ffi.Pointer<Display> arg0,
  ) {
    return _XBitmapPad(
      arg0,
    );
  }

  late final _XBitmapPadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XBitmapPad');
  late final _XBitmapPad =
      _XBitmapPadPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XBitmapUnit(
    ffi.Pointer<Display> arg0,
  ) {
    return _XBitmapUnit(
      arg0,
    );
  }

  late final _XBitmapUnitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XBitmapUnit');
  late final _XBitmapUnit =
      _XBitmapUnitPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XCellsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XCellsOfScreen(
      arg0,
    );
  }

  late final _XCellsOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XCellsOfScreen');
  late final _XCellsOfScreen =
      _XCellsOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XChangeActivePointerGrab(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XChangeActivePointerGrab(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangeActivePointerGrabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.UnsignedInt, Cursor,
              Time)>>('XChangeActivePointerGrab');
  late final _XChangeActivePointerGrab = _XChangeActivePointerGrabPtr
      .asFunction<int Function(ffi.Pointer<Display>, int, int, int)>();

  int XChangeGC(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    return _XChangeGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangeGCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.UnsignedLong,
              ffi.Pointer<XGCValues>)>>('XChangeGC');
  late final _XChangeGC = _XChangeGCPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, ffi.Pointer<XGCValues>)>();

  int XChangeKeyboardControl(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XKeyboardControl> arg2,
  ) {
    return _XChangeKeyboardControl(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XChangeKeyboardControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.UnsignedLong,
              ffi.Pointer<XKeyboardControl>)>>('XChangeKeyboardControl');
  late final _XChangeKeyboardControl = _XChangeKeyboardControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XKeyboardControl>)>();

  int XChangeKeyboardMapping(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<KeySym> arg3,
    int arg4,
  ) {
    return _XChangeKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XChangeKeyboardMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Int,
              ffi.Pointer<KeySym>, ffi.Int)>>('XChangeKeyboardMapping');
  late final _XChangeKeyboardMapping = _XChangeKeyboardMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, ffi.Pointer<KeySym>, int)>();

  int XChangePointerControl(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XChangePointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XChangePointerControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('XChangePointerControl');
  late final _XChangePointerControl = _XChangePointerControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int)>();

  int XChangeProperty(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.UnsignedChar> arg6,
    int arg7,
  ) {
    return _XChangeProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XChangePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              Atom,
              Atom,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XChangeProperty');
  late final _XChangeProperty = _XChangePropertyPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int XChangeSaveSet(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XChangeSaveSet(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XChangeSaveSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int)>>('XChangeSaveSet');
  late final _XChangeSaveSet = _XChangeSaveSetPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XChangeWindowAttributes(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XSetWindowAttributes> arg3,
  ) {
    return _XChangeWindowAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangeWindowAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.UnsignedLong,
              ffi.Pointer<XSetWindowAttributes>)>>('XChangeWindowAttributes');
  late final _XChangeWindowAttributes = _XChangeWindowAttributesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, ffi.Pointer<XSetWindowAttributes>)>();

  int XCheckIfEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>
        arg2,
    XPointer arg3,
  ) {
    return _XCheckIfEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCheckIfEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XEvent>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<Display>,
                          ffi.Pointer<XEvent>, XPointer)>>,
              XPointer)>>('XCheckIfEvent');
  late final _XCheckIfEvent = _XCheckIfEventPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XEvent>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>,
          XPointer)>();

  int XCheckMaskEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XEvent> arg2,
  ) {
    return _XCheckMaskEvent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XCheckMaskEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Long,
              ffi.Pointer<XEvent>)>>('XCheckMaskEvent');
  late final _XCheckMaskEvent = _XCheckMaskEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XEvent>)>();

  int XCheckTypedEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XEvent> arg2,
  ) {
    return _XCheckTypedEvent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XCheckTypedEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int,
              ffi.Pointer<XEvent>)>>('XCheckTypedEvent');
  late final _XCheckTypedEvent = _XCheckTypedEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XEvent>)>();

  int XCheckTypedWindowEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XEvent> arg3,
  ) {
    return _XCheckTypedWindowEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCheckTypedWindowEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Int,
              ffi.Pointer<XEvent>)>>('XCheckTypedWindowEvent');
  late final _XCheckTypedWindowEvent = _XCheckTypedWindowEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, ffi.Pointer<XEvent>)>();

  int XCheckWindowEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XEvent> arg3,
  ) {
    return _XCheckWindowEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCheckWindowEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Long,
              ffi.Pointer<XEvent>)>>('XCheckWindowEvent');
  late final _XCheckWindowEvent = _XCheckWindowEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, ffi.Pointer<XEvent>)>();

  int XCirculateSubwindows(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XCirculateSubwindows(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XCirculateSubwindowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int)>>('XCirculateSubwindows');
  late final _XCirculateSubwindows = _XCirculateSubwindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XCirculateSubwindowsDown(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XCirculateSubwindowsDown(
      arg0,
      arg1,
    );
  }

  late final _XCirculateSubwindowsDownPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XCirculateSubwindowsDown');
  late final _XCirculateSubwindowsDown = _XCirculateSubwindowsDownPtr
      .asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XCirculateSubwindowsUp(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XCirculateSubwindowsUp(
      arg0,
      arg1,
    );
  }

  late final _XCirculateSubwindowsUpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XCirculateSubwindowsUp');
  late final _XCirculateSubwindowsUp = _XCirculateSubwindowsUpPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XClearArea(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XClearArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XClearAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int)>>('XClearArea');
  late final _XClearArea = _XClearAreaPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int, int)>();

  int XClearWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XClearWindow(
      arg0,
      arg1,
    );
  }

  late final _XClearWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XClearWindow');
  late final _XClearWindow =
      _XClearWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XCloseDisplay(
    ffi.Pointer<Display> arg0,
  ) {
    return _XCloseDisplay(
      arg0,
    );
  }

  late final _XCloseDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XCloseDisplay');
  late final _XCloseDisplay =
      _XCloseDisplayPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XConfigureWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XWindowChanges> arg3,
  ) {
    return _XConfigureWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XConfigureWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.UnsignedInt,
              ffi.Pointer<XWindowChanges>)>>('XConfigureWindow');
  late final _XConfigureWindow = _XConfigureWindowPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, ffi.Pointer<XWindowChanges>)>();

  int XConnectionNumber(
    ffi.Pointer<Display> arg0,
  ) {
    return _XConnectionNumber(
      arg0,
    );
  }

  late final _XConnectionNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XConnectionNumber');
  late final _XConnectionNumber =
      _XConnectionNumberPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XConvertSelection(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XConvertSelection(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XConvertSelectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Atom, Atom, Atom, Window,
              Time)>>('XConvertSelection');
  late final _XConvertSelection = _XConvertSelectionPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int)>();

  int XCopyArea(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    GC arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    return _XCopyArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _XCopyAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              Drawable,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('XCopyArea');
  late final _XCopyArea = _XCopyAreaPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, GC, int, int, int, int, int, int)>();

  int XCopyGC(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    GC arg3,
  ) {
    return _XCopyGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XCopyGCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.UnsignedLong, GC)>>('XCopyGC');
  late final _XCopyGC =
      _XCopyGCPtr.asFunction<int Function(ffi.Pointer<Display>, GC, int, GC)>();

  int XCopyPlane(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    GC arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    int arg10,
  ) {
    return _XCopyPlane(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _XCopyPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              Drawable,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong)>>('XCopyPlane');
  late final _XCopyPlane = _XCopyPlanePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, GC, int, int, int, int, int,
          int, int)>();

  int XDefaultDepth(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDefaultDepth(
      arg0,
      arg1,
    );
  }

  late final _XDefaultDepthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDefaultDepth');
  late final _XDefaultDepth =
      _XDefaultDepthPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDefaultDepthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDefaultDepthOfScreen(
      arg0,
    );
  }

  late final _XDefaultDepthOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XDefaultDepthOfScreen');
  late final _XDefaultDepthOfScreen =
      _XDefaultDepthOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XDefaultScreen(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDefaultScreen(
      arg0,
    );
  }

  late final _XDefaultScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XDefaultScreen');
  late final _XDefaultScreen =
      _XDefaultScreenPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XDefineCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XDefineCursor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XDefineCursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, Cursor)>>('XDefineCursor');
  late final _XDefineCursor = _XDefineCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XDeleteProperty(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XDeleteProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XDeletePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, Atom)>>('XDeleteProperty');
  late final _XDeleteProperty = _XDeletePropertyPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XDestroyWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDestroyWindow(
      arg0,
      arg1,
    );
  }

  late final _XDestroyWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XDestroyWindow');
  late final _XDestroyWindow =
      _XDestroyWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDestroySubwindows(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDestroySubwindows(
      arg0,
      arg1,
    );
  }

  late final _XDestroySubwindowsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XDestroySubwindows');
  late final _XDestroySubwindows = _XDestroySubwindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XDoesBackingStore(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDoesBackingStore(
      arg0,
    );
  }

  late final _XDoesBackingStorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XDoesBackingStore');
  late final _XDoesBackingStore =
      _XDoesBackingStorePtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XDoesSaveUnders(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XDoesSaveUnders(
      arg0,
    );
  }

  late final _XDoesSaveUndersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XDoesSaveUnders');
  late final _XDoesSaveUnders =
      _XDoesSaveUndersPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XDisableAccessControl(
    ffi.Pointer<Display> arg0,
  ) {
    return _XDisableAccessControl(
      arg0,
    );
  }

  late final _XDisableAccessControlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XDisableAccessControl');
  late final _XDisableAccessControl = _XDisableAccessControlPtr.asFunction<
      int Function(ffi.Pointer<Display>)>();

  int XDisplayCells(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayCells(
      arg0,
      arg1,
    );
  }

  late final _XDisplayCellsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayCells');
  late final _XDisplayCells =
      _XDisplayCellsPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDisplayHeight(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayHeight(
      arg0,
      arg1,
    );
  }

  late final _XDisplayHeightPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayHeight');
  late final _XDisplayHeight =
      _XDisplayHeightPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDisplayHeightMM(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayHeightMM(
      arg0,
      arg1,
    );
  }

  late final _XDisplayHeightMMPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayHeightMM');
  late final _XDisplayHeightMM = _XDisplayHeightMMPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XDisplayKeycodes(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XDisplayKeycodes(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XDisplayKeycodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XDisplayKeycodes');
  late final _XDisplayKeycodes = _XDisplayKeycodesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XDisplayPlanes(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayPlanes(
      arg0,
      arg1,
    );
  }

  late final _XDisplayPlanesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayPlanes');
  late final _XDisplayPlanes =
      _XDisplayPlanesPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDisplayWidth(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayWidth(
      arg0,
      arg1,
    );
  }

  late final _XDisplayWidthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayWidth');
  late final _XDisplayWidth =
      _XDisplayWidthPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDisplayWidthMM(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XDisplayWidthMM(
      arg0,
      arg1,
    );
  }

  late final _XDisplayWidthMMPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XDisplayWidthMM');
  late final _XDisplayWidthMM =
      _XDisplayWidthMMPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XDrawArc(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XDrawArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XDrawArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int, ffi.Int)>>('XDrawArc');
  late final _XDrawArc = _XDrawArcPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, int, int, int, int, int, int)>();

  int XDrawArcs(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    return _XDrawArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XDrawArcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XArc>, ffi.Int)>>('XDrawArcs');
  late final _XDrawArcs = _XDrawArcsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, ffi.Pointer<XArc>, int)>();

  int XDrawImageString(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
  ) {
    return _XDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawImageStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('XDrawImageString');
  late final _XDrawImageString = _XDrawImageStringPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  int XDrawImageString16(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    return _XDrawImageString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawImageString16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<XChar2b>, ffi.Int)>>('XDrawImageString16');
  late final _XDrawImageString16 = _XDrawImageString16Ptr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XChar2b>, int)>();

  int XDrawLine(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XDrawLine(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('XDrawLine');
  late final _XDrawLine = _XDrawLinePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int, int, int)>();

  int XDrawLines(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    return _XDrawLines(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XDrawLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XPoint>, ffi.Int, ffi.Int)>>('XDrawLines');
  late final _XDrawLines = _XDrawLinesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XPoint>, int, int)>();

  int XDrawPoint(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
  ) {
    return _XDrawPoint(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XDrawPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int,
              ffi.Int)>>('XDrawPoint');
  late final _XDrawPoint = _XDrawPointPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int)>();

  int XDrawPoints(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    return _XDrawPoints(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XDrawPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XPoint>, ffi.Int, ffi.Int)>>('XDrawPoints');
  late final _XDrawPoints = _XDrawPointsPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XPoint>, int, int)>();

  int XDrawRectangle(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XDrawRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('XDrawRectangle');
  late final _XDrawRectangle = _XDrawRectanglePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int, int, int)>();

  int XDrawRectangles(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    return _XDrawRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XDrawRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XRectangle>, ffi.Int)>>('XDrawRectangles');
  late final _XDrawRectangles = _XDrawRectanglesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XRectangle>, int)>();

  int XDrawSegments(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XSegment> arg3,
    int arg4,
  ) {
    return _XDrawSegments(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XDrawSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XSegment>, ffi.Int)>>('XDrawSegments');
  late final _XDrawSegments = _XDrawSegmentsPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XSegment>, int)>();

  int XDrawString(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
  ) {
    return _XDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('XDrawString');
  late final _XDrawString = _XDrawStringPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  int XDrawString16(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    return _XDrawString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawString16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<XChar2b>, ffi.Int)>>('XDrawString16');
  late final _XDrawString16 = _XDrawString16Ptr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XChar2b>, int)>();

  int XDrawText(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem> arg5,
    int arg6,
  ) {
    return _XDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<XTextItem>, ffi.Int)>>('XDrawText');
  late final _XDrawText = _XDrawTextPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XTextItem>, int)>();

  int XDrawText16(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem16> arg5,
    int arg6,
  ) {
    return _XDrawText16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XDrawText16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.Pointer<XTextItem16>, ffi.Int)>>('XDrawText16');
  late final _XDrawText16 = _XDrawText16Ptr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XTextItem16>, int)>();

  int XEnableAccessControl(
    ffi.Pointer<Display> arg0,
  ) {
    return _XEnableAccessControl(
      arg0,
    );
  }

  late final _XEnableAccessControlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XEnableAccessControl');
  late final _XEnableAccessControl =
      _XEnableAccessControlPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XEventsQueued(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XEventsQueued(
      arg0,
      arg1,
    );
  }

  late final _XEventsQueuedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XEventsQueued');
  late final _XEventsQueued =
      _XEventsQueuedPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XFetchName(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _XFetchName(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XFetchNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XFetchName');
  late final _XFetchName = _XFetchNamePtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XFillArc(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XFillArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XFillArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int, ffi.Int)>>('XFillArc');
  late final _XFillArc = _XFillArcPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, int, int, int, int, int, int)>();

  int XFillArcs(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    return _XFillArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XFillArcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XArc>, ffi.Int)>>('XFillArcs');
  late final _XFillArcs = _XFillArcsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, ffi.Pointer<XArc>, int)>();

  int XFillPolygon(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XFillPolygon(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XFillPolygonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XPoint>, ffi.Int, ffi.Int, ffi.Int)>>('XFillPolygon');
  late final _XFillPolygon = _XFillPolygonPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XPoint>, int, int, int)>();

  int XFillRectangle(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XFillRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XFillRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('XFillRectangle');
  late final _XFillRectangle = _XFillRectanglePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, int, int, int, int)>();

  int XFillRectangles(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    return _XFillRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XFillRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Drawable, GC,
              ffi.Pointer<XRectangle>, ffi.Int)>>('XFillRectangles');
  late final _XFillRectangles = _XFillRectanglesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, GC, ffi.Pointer<XRectangle>, int)>();

  int XFlush(
    ffi.Pointer<Display> arg0,
  ) {
    return _XFlush(
      arg0,
    );
  }

  late final _XFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XFlush');
  late final _XFlush =
      _XFlushPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XForceScreenSaver(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XForceScreenSaver(
      arg0,
      arg1,
    );
  }

  late final _XForceScreenSaverPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XForceScreenSaver');
  late final _XForceScreenSaver = _XForceScreenSaverPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XFree(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _XFree(
      arg0,
    );
  }

  late final _XFreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'XFree');
  late final _XFree =
      _XFreePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int XFreeColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XFreeColormap(
      arg0,
      arg1,
    );
  }

  late final _XFreeColormapPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Colormap)>>(
      'XFreeColormap');
  late final _XFreeColormap =
      _XFreeColormapPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XFreeColors(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
  ) {
    return _XFreeColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XFreeColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Int,
              ffi.UnsignedLong)>>('XFreeColors');
  late final _XFreeColors = _XFreeColorsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.UnsignedLong>,
          int, int)>();

  int XFreeCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XFreeCursor(
      arg0,
      arg1,
    );
  }

  late final _XFreeCursorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Cursor)>>(
      'XFreeCursor');
  late final _XFreeCursor =
      _XFreeCursorPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XFreeExtensionList(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _XFreeExtensionList(
      arg0,
    );
  }

  late final _XFreeExtensionListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XFreeExtensionList');
  late final _XFreeExtensionList = _XFreeExtensionListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XFreeFont(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XFontStruct> arg1,
  ) {
    return _XFreeFont(
      arg0,
      arg1,
    );
  }

  late final _XFreeFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XFontStruct>)>>('XFreeFont');
  late final _XFreeFont = _XFreeFontPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XFontStruct>)>();

  int XFreeFontInfo(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<XFontStruct> arg1,
    int arg2,
  ) {
    return _XFreeFontInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XFreeFontInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<XFontStruct>, ffi.Int)>>('XFreeFontInfo');
  late final _XFreeFontInfo = _XFreeFontInfoPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<XFontStruct>, int)>();

  int XFreeFontNames(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _XFreeFontNames(
      arg0,
    );
  }

  late final _XFreeFontNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XFreeFontNames');
  late final _XFreeFontNames = _XFreeFontNamesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XFreeFontPath(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _XFreeFontPath(
      arg0,
    );
  }

  late final _XFreeFontPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XFreeFontPath');
  late final _XFreeFontPath = _XFreeFontPathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XFreeGC(
    ffi.Pointer<Display> arg0,
    GC arg1,
  ) {
    return _XFreeGC(
      arg0,
      arg1,
    );
  }

  late final _XFreeGCPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, GC)>>(
          'XFreeGC');
  late final _XFreeGC =
      _XFreeGCPtr.asFunction<int Function(ffi.Pointer<Display>, GC)>();

  int XFreeModifiermap(
    ffi.Pointer<XModifierKeymap> arg0,
  ) {
    return _XFreeModifiermap(
      arg0,
    );
  }

  late final _XFreeModifiermapPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<XModifierKeymap>)>>(
      'XFreeModifiermap');
  late final _XFreeModifiermap = _XFreeModifiermapPtr.asFunction<
      int Function(ffi.Pointer<XModifierKeymap>)>();

  int XFreePixmap(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XFreePixmap(
      arg0,
      arg1,
    );
  }

  late final _XFreePixmapPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Pixmap)>>(
      'XFreePixmap');
  late final _XFreePixmap =
      _XFreePixmapPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XGeometry(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<ffi.Int> arg9,
    ffi.Pointer<ffi.Int> arg10,
    ffi.Pointer<ffi.Int> arg11,
    ffi.Pointer<ffi.Int> arg12,
  ) {
    return _XGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
    );
  }

  late final _XGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XGeometry');
  late final _XGeometry = _XGeometryPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int XGetErrorDatabaseText(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    int arg5,
  ) {
    return _XGetErrorDatabaseText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XGetErrorDatabaseTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XGetErrorDatabaseText');
  late final _XGetErrorDatabaseText = _XGetErrorDatabaseTextPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int XGetErrorText(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _XGetErrorText(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetErrorTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XGetErrorText');
  late final _XGetErrorText = _XGetErrorTextPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>, int)>();

  int XGetFontProperty(
    ffi.Pointer<XFontStruct> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _XGetFontProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetFontPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<XFontStruct>, Atom,
              ffi.Pointer<ffi.UnsignedLong>)>>('XGetFontProperty');
  late final _XGetFontProperty = _XGetFontPropertyPtr.asFunction<
      int Function(
          ffi.Pointer<XFontStruct>, int, ffi.Pointer<ffi.UnsignedLong>)>();

  int XGetGCValues(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    return _XGetGCValues(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetGCValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.UnsignedLong,
              ffi.Pointer<XGCValues>)>>('XGetGCValues');
  late final _XGetGCValues = _XGetGCValuesPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, ffi.Pointer<XGCValues>)>();

  int XGetGeometry(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Window> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
    ffi.Pointer<ffi.UnsignedInt> arg7,
    ffi.Pointer<ffi.UnsignedInt> arg8,
  ) {
    return _XGetGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XGetGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.Pointer<Window>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XGetGeometry');
  late final _XGetGeometry = _XGetGeometryPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<Window>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int XGetIconName(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _XGetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetIconNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XGetIconName');
  late final _XGetIconName = _XGetIconNamePtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int XGetInputFocus(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<Window> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XGetInputFocus(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetInputFocusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<Window>,
              ffi.Pointer<ffi.Int>)>>('XGetInputFocus');
  late final _XGetInputFocus = _XGetInputFocusPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, ffi.Pointer<Window>, ffi.Pointer<ffi.Int>)>();

  int XGetKeyboardControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XKeyboardState> arg1,
  ) {
    return _XGetKeyboardControl(
      arg0,
      arg1,
    );
  }

  late final _XGetKeyboardControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>,
              ffi.Pointer<XKeyboardState>)>>('XGetKeyboardControl');
  late final _XGetKeyboardControl = _XGetKeyboardControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XKeyboardState>)>();

  int XGetPointerControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _XGetPointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetPointerControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XGetPointerControl');
  late final _XGetPointerControl = _XGetPointerControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XGetPointerMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int arg2,
  ) {
    return _XGetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetPointerMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XGetPointerMapping');
  late final _XGetPointerMapping = _XGetPointerMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int XGetScreenSaver(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _XGetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XGetScreenSaverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XGetScreenSaver');
  late final _XGetScreenSaver = _XGetScreenSaverPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XGetTransientForHint(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Window> arg2,
  ) {
    return _XGetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetTransientForHintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<Window>)>>('XGetTransientForHint');
  late final _XGetTransientForHint = _XGetTransientForHintPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<Window>)>();

  int XGetWindowProperty(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<Atom> arg7,
    ffi.Pointer<ffi.Int> arg8,
    ffi.Pointer<ffi.UnsignedLong> arg9,
    ffi.Pointer<ffi.UnsignedLong> arg10,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> arg11,
  ) {
    return _XGetWindowProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  late final _XGetWindowPropertyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<Display>,
                  Window,
                  Atom,
                  ffi.Long,
                  ffi.Long,
                  ffi.Int,
                  Atom,
                  ffi.Pointer<Atom>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'XGetWindowProperty');
  late final _XGetWindowProperty = _XGetWindowPropertyPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<Atom>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int XGetWindowAttributes(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XWindowAttributes> arg2,
  ) {
    return _XGetWindowAttributes(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetWindowAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<XWindowAttributes>)>>('XGetWindowAttributes');
  late final _XGetWindowAttributes = _XGetWindowAttributesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, ffi.Pointer<XWindowAttributes>)>();

  int XGrabButton(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    return _XGrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _XGrabButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              Window,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              Window,
              Cursor)>>('XGrabButton');
  late final _XGrabButton = _XGrabButtonPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, int, int, int, int, int, int, int)>();

  int XGrabKey(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XGrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XGrabKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.UnsignedInt,
              Window, ffi.Int, ffi.Int, ffi.Int)>>('XGrabKey');
  late final _XGrabKey = _XGrabKeyPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int, int)>();

  int XGrabKeyboard(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XGrabKeyboard(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XGrabKeyboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Int, ffi.Int,
              ffi.Int, Time)>>('XGrabKeyboard');
  late final _XGrabKeyboard = _XGrabKeyboardPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int)>();

  int XGrabPointer(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XGrabPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XGrabPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              Window,
              Cursor,
              Time)>>('XGrabPointer');
  late final _XGrabPointer = _XGrabPointerPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, int, int, int, int, int, int)>();

  int XGrabServer(
    ffi.Pointer<Display> arg0,
  ) {
    return _XGrabServer(
      arg0,
    );
  }

  late final _XGrabServerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XGrabServer');
  late final _XGrabServer =
      _XGrabServerPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XHeightMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XHeightMMOfScreen(
      arg0,
    );
  }

  late final _XHeightMMOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XHeightMMOfScreen');
  late final _XHeightMMOfScreen =
      _XHeightMMOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XHeightOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XHeightOfScreen(
      arg0,
    );
  }

  late final _XHeightOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XHeightOfScreen');
  late final _XHeightOfScreen =
      _XHeightOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XIfEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>
        arg2,
    XPointer arg3,
  ) {
    return _XIfEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XIfEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XEvent>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<Display>,
                          ffi.Pointer<XEvent>, XPointer)>>,
              XPointer)>>('XIfEvent');
  late final _XIfEvent = _XIfEventPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XEvent>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>,
          XPointer)>();

  int XImageByteOrder(
    ffi.Pointer<Display> arg0,
  ) {
    return _XImageByteOrder(
      arg0,
    );
  }

  late final _XImageByteOrderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XImageByteOrder');
  late final _XImageByteOrder =
      _XImageByteOrderPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XInstallColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XInstallColormap(
      arg0,
      arg1,
    );
  }

  late final _XInstallColormapPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Colormap)>>(
      'XInstallColormap');
  late final _XInstallColormap = _XInstallColormapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XKeysymToKeycode(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XKeysymToKeycode(
      arg0,
      arg1,
    );
  }

  late final _XKeysymToKeycodePtr = _lookup<
          ffi.NativeFunction<KeyCode Function(ffi.Pointer<Display>, KeySym)>>(
      'XKeysymToKeycode');
  late final _XKeysymToKeycode = _XKeysymToKeycodePtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XKillClient(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XKillClient(
      arg0,
      arg1,
    );
  }

  late final _XKillClientPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, XID)>>(
          'XKillClient');
  late final _XKillClient =
      _XKillClientPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XLookupColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    return _XLookupColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XLookupColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<XColor>,
              ffi.Pointer<XColor>)>>('XLookupColor');
  late final _XLookupColor = _XLookupColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<XColor>, ffi.Pointer<XColor>)>();

  int XLowerWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XLowerWindow(
      arg0,
      arg1,
    );
  }

  late final _XLowerWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XLowerWindow');
  late final _XLowerWindow =
      _XLowerWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XMapRaised(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XMapRaised(
      arg0,
      arg1,
    );
  }

  late final _XMapRaisedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XMapRaised');
  late final _XMapRaised =
      _XMapRaisedPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XMapSubwindows(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XMapSubwindows(
      arg0,
      arg1,
    );
  }

  late final _XMapSubwindowsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XMapSubwindows');
  late final _XMapSubwindows =
      _XMapSubwindowsPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XMapWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XMapWindow(
      arg0,
      arg1,
    );
  }

  late final _XMapWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XMapWindow');
  late final _XMapWindow =
      _XMapWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XMaskEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XEvent> arg2,
  ) {
    return _XMaskEvent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XMaskEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Long,
              ffi.Pointer<XEvent>)>>('XMaskEvent');
  late final _XMaskEvent = _XMaskEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XEvent>)>();

  int XMaxCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XMaxCmapsOfScreen(
      arg0,
    );
  }

  late final _XMaxCmapsOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XMaxCmapsOfScreen');
  late final _XMaxCmapsOfScreen =
      _XMaxCmapsOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XMinCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XMinCmapsOfScreen(
      arg0,
    );
  }

  late final _XMinCmapsOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XMinCmapsOfScreen');
  late final _XMinCmapsOfScreen =
      _XMinCmapsOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XMoveResizeWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XMoveResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XMoveResizeWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('XMoveResizeWindow');
  late final _XMoveResizeWindow = _XMoveResizeWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int, int)>();

  int XMoveWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XMoveWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XMoveWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int, ffi.Int)>>('XMoveWindow');
  late final _XMoveWindow = _XMoveWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XNextEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
  ) {
    return _XNextEvent(
      arg0,
      arg1,
    );
  }

  late final _XNextEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XEvent>)>>('XNextEvent');
  late final _XNextEvent = _XNextEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XEvent>)>();

  int XNoOp(
    ffi.Pointer<Display> arg0,
  ) {
    return _XNoOp(
      arg0,
    );
  }

  late final _XNoOpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XNoOp');
  late final _XNoOp =
      _XNoOpPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XParseColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    return _XParseColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XParseColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap,
              ffi.Pointer<ffi.Char>, ffi.Pointer<XColor>)>>('XParseColor');
  late final _XParseColor = _XParseColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<XColor>)>();

  int XParseGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.UnsignedInt> arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
  ) {
    return _XParseGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XParseGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XParseGeometry');
  late final _XParseGeometry = _XParseGeometryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int XPeekEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
  ) {
    return _XPeekEvent(
      arg0,
      arg1,
    );
  }

  late final _XPeekEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XEvent>)>>('XPeekEvent');
  late final _XPeekEvent = _XPeekEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XEvent>)>();

  int XPeekIfEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>
        arg2,
    XPointer arg3,
  ) {
    return _XPeekIfEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XPeekIfEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XEvent>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<Display>,
                          ffi.Pointer<XEvent>, XPointer)>>,
              XPointer)>>('XPeekIfEvent');
  late final _XPeekIfEvent = _XPeekIfEventPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XEvent>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<Display>, ffi.Pointer<XEvent>, XPointer)>>,
          XPointer)>();

  int XPending(
    ffi.Pointer<Display> arg0,
  ) {
    return _XPending(
      arg0,
    );
  }

  late final _XPendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XPending');
  late final _XPending =
      _XPendingPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XPlanesOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XPlanesOfScreen(
      arg0,
    );
  }

  late final _XPlanesOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XPlanesOfScreen');
  late final _XPlanesOfScreen =
      _XPlanesOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XProtocolRevision(
    ffi.Pointer<Display> arg0,
  ) {
    return _XProtocolRevision(
      arg0,
    );
  }

  late final _XProtocolRevisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XProtocolRevision');
  late final _XProtocolRevision =
      _XProtocolRevisionPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XProtocolVersion(
    ffi.Pointer<Display> arg0,
  ) {
    return _XProtocolVersion(
      arg0,
    );
  }

  late final _XProtocolVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XProtocolVersion');
  late final _XProtocolVersion =
      _XProtocolVersionPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XPutBackEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XEvent> arg1,
  ) {
    return _XPutBackEvent(
      arg0,
      arg1,
    );
  }

  late final _XPutBackEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XEvent>)>>('XPutBackEvent');
  late final _XPutBackEvent = _XPutBackEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XEvent>)>();

  int XPutImage(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    ffi.Pointer<XImage> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    return _XPutImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _XPutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              GC,
              ffi.Pointer<XImage>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('XPutImage');
  late final _XPutImage = _XPutImagePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, GC, ffi.Pointer<XImage>, int, int,
          int, int, int, int)>();

  int XQLength(
    ffi.Pointer<Display> arg0,
  ) {
    return _XQLength(
      arg0,
    );
  }

  late final _XQLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XQLength');
  late final _XQLength =
      _XQLengthPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XQueryBestCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
  ) {
    return _XQueryBestCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XQueryBestCursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryBestCursor');
  late final _XQueryBestCursor = _XQueryBestCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int XQueryBestSize(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
  ) {
    return _XQueryBestSize(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XQueryBestSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Int,
              Drawable,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryBestSize');
  late final _XQueryBestSize = _XQueryBestSizePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int XQueryBestStipple(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
  ) {
    return _XQueryBestStipple(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XQueryBestStipplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryBestStipple');
  late final _XQueryBestStipple = _XQueryBestStipplePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int XQueryBestTile(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
  ) {
    return _XQueryBestTile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XQueryBestTilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryBestTile');
  late final _XQueryBestTile = _XQueryBestTilePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int XQueryColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    return _XQueryColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XQueryColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap,
              ffi.Pointer<XColor>)>>('XQueryColor');
  late final _XQueryColor = _XQueryColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>)>();

  int XQueryColors(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    return _XQueryColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XQueryColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap, ffi.Pointer<XColor>,
              ffi.Int)>>('XQueryColors');
  late final _XQueryColors = _XQueryColorsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>, int)>();

  int XQueryExtension(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _XQueryExtension(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XQueryExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XQueryExtension');
  late final _XQueryExtension = _XQueryExtensionPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XQueryKeymap(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _XQueryKeymap(
      arg0,
      arg1,
    );
  }

  late final _XQueryKeymapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>>('XQueryKeymap');
  late final _XQueryKeymap = _XQueryKeymapPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>();

  int XQueryPointer(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Window> arg2,
    ffi.Pointer<Window> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<ffi.Int> arg7,
    ffi.Pointer<ffi.UnsignedInt> arg8,
  ) {
    return _XQueryPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XQueryPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Pointer<Window>,
              ffi.Pointer<Window>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryPointer');
  late final _XQueryPointer = _XQueryPointerPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<Window>,
          ffi.Pointer<Window>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int XQueryTextExtents(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    return _XQueryTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XQueryTextExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              XID,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XCharStruct>)>>('XQueryTextExtents');
  late final _XQueryTextExtents = _XQueryTextExtentsPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XCharStruct>)>();

  int XQueryTextExtents16(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XChar2b> arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    return _XQueryTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XQueryTextExtents16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              XID,
              ffi.Pointer<XChar2b>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XCharStruct>)>>('XQueryTextExtents16');
  late final _XQueryTextExtents16 = _XQueryTextExtents16Ptr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<XChar2b>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XCharStruct>)>();

  int XQueryTree(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Window> arg2,
    ffi.Pointer<Window> arg3,
    ffi.Pointer<ffi.Pointer<Window>> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
  ) {
    return _XQueryTree(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XQueryTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Pointer<Window>,
              ffi.Pointer<Window>,
              ffi.Pointer<ffi.Pointer<Window>>,
              ffi.Pointer<ffi.UnsignedInt>)>>('XQueryTree');
  late final _XQueryTree = _XQueryTreePtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<Window>,
          ffi.Pointer<Window>,
          ffi.Pointer<ffi.Pointer<Window>>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int XRaiseWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XRaiseWindow(
      arg0,
      arg1,
    );
  }

  late final _XRaiseWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XRaiseWindow');
  late final _XRaiseWindow =
      _XRaiseWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XReadBitmapFile(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.UnsignedInt> arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<Pixmap> arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<ffi.Int> arg7,
  ) {
    return _XReadBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XReadBitmapFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Drawable,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<Pixmap>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XReadBitmapFile');
  late final _XReadBitmapFile = _XReadBitmapFilePtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<Pixmap>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int XReadBitmapFileData(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.UnsignedInt> arg1,
    ffi.Pointer<ffi.UnsignedInt> arg2,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _XReadBitmapFileData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XReadBitmapFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XReadBitmapFileData');
  late final _XReadBitmapFileData = _XReadBitmapFileDataPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int XRebindKeysym(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<KeySym> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedChar> arg4,
    int arg5,
  ) {
    return _XRebindKeysym(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XRebindKeysymPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              KeySym,
              ffi.Pointer<KeySym>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XRebindKeysym');
  late final _XRebindKeysym = _XRebindKeysymPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<KeySym>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int XRecolorCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    return _XRecolorCursor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XRecolorCursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Cursor, ffi.Pointer<XColor>,
              ffi.Pointer<XColor>)>>('XRecolorCursor');
  late final _XRecolorCursor = _XRecolorCursorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>,
          ffi.Pointer<XColor>)>();

  int XRefreshKeyboardMapping(
    ffi.Pointer<XMappingEvent> arg0,
  ) {
    return _XRefreshKeyboardMapping(
      arg0,
    );
  }

  late final _XRefreshKeyboardMappingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<XMappingEvent>)>>(
          'XRefreshKeyboardMapping');
  late final _XRefreshKeyboardMapping = _XRefreshKeyboardMappingPtr.asFunction<
      int Function(ffi.Pointer<XMappingEvent>)>();

  int XRemoveFromSaveSet(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XRemoveFromSaveSet(
      arg0,
      arg1,
    );
  }

  late final _XRemoveFromSaveSetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XRemoveFromSaveSet');
  late final _XRemoveFromSaveSet = _XRemoveFromSaveSetPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XRemoveHost(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    return _XRemoveHost(
      arg0,
      arg1,
    );
  }

  late final _XRemoveHostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XHostAddress>)>>('XRemoveHost');
  late final _XRemoveHost = _XRemoveHostPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>)>();

  int XRemoveHosts(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    return _XRemoveHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XRemoveHostsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>,
              ffi.Int)>>('XRemoveHosts');
  late final _XRemoveHosts = _XRemoveHostsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XHostAddress>, int)>();

  int XReparentWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XReparentWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XReparentWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, Window, ffi.Int,
              ffi.Int)>>('XReparentWindow');
  late final _XReparentWindow = _XReparentWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int)>();

  int XResetScreenSaver(
    ffi.Pointer<Display> arg0,
  ) {
    return _XResetScreenSaver(
      arg0,
    );
  }

  late final _XResetScreenSaverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XResetScreenSaver');
  late final _XResetScreenSaver =
      _XResetScreenSaverPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XResizeWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XResizeWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('XResizeWindow');
  late final _XResizeWindow = _XResizeWindowPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XRestackWindows(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<Window> arg1,
    int arg2,
  ) {
    return _XRestackWindows(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XRestackWindowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<Window>,
              ffi.Int)>>('XRestackWindows');
  late final _XRestackWindows = _XRestackWindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<Window>, int)>();

  int XRotateBuffers(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XRotateBuffers(
      arg0,
      arg1,
    );
  }

  late final _XRotateBuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XRotateBuffers');
  late final _XRotateBuffers =
      _XRotateBuffersPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XRotateWindowProperties(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<Atom> arg2,
    int arg3,
    int arg4,
  ) {
    return _XRotateWindowProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XRotateWindowPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Pointer<Atom>,
              ffi.Int, ffi.Int)>>('XRotateWindowProperties');
  late final _XRotateWindowProperties = _XRotateWindowPropertiesPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<Atom>, int, int)>();

  int XScreenCount(
    ffi.Pointer<Display> arg0,
  ) {
    return _XScreenCount(
      arg0,
    );
  }

  late final _XScreenCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XScreenCount');
  late final _XScreenCount =
      _XScreenCountPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XSelectInput(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSelectInput(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSelectInputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Long)>>('XSelectInput');
  late final _XSelectInput = _XSelectInputPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XSendEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XEvent> arg4,
  ) {
    return _XSendEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XSendEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Int, ffi.Long,
              ffi.Pointer<XEvent>)>>('XSendEvent');
  late final _XSendEvent = _XSendEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, ffi.Pointer<XEvent>)>();

  int XSetAccessControl(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XSetAccessControl(
      arg0,
      arg1,
    );
  }

  late final _XSetAccessControlPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XSetAccessControl');
  late final _XSetAccessControl = _XSetAccessControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XSetArcMode(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetArcMode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetArcModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>('XSetArcMode');
  late final _XSetArcMode =
      _XSetArcModePtr.asFunction<int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetBackground(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetBackgroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.UnsignedLong)>>('XSetBackground');
  late final _XSetBackground = _XSetBackgroundPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetClipMask(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetClipMask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetClipMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, Pixmap)>>('XSetClipMask');
  late final _XSetClipMask = _XSetClipMaskPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetClipOrigin(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    int arg3,
  ) {
    return _XSetClipOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetClipOriginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.Int, ffi.Int)>>('XSetClipOrigin');
  late final _XSetClipOrigin = _XSetClipOriginPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, int)>();

  int XSetClipRectangles(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    int arg6,
  ) {
    return _XSetClipRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XSetClipRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Int,
              ffi.Int)>>('XSetClipRectangles');
  late final _XSetClipRectangles = _XSetClipRectanglesPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, int, ffi.Pointer<XRectangle>,
          int, int)>();

  int XSetCloseDownMode(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XSetCloseDownMode(
      arg0,
      arg1,
    );
  }

  late final _XSetCloseDownModePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XSetCloseDownMode');
  late final _XSetCloseDownMode = _XSetCloseDownModePtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XSetCommand(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    int arg3,
  ) {
    return _XSetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('XSetCommand');
  late final _XSetCommand = _XSetCommandPtr.asFunction<
      int Function(ffi.Pointer<Display>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int XSetDashes(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _XSetDashes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XSetDashesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('XSetDashes');
  late final _XSetDashes = _XSetDashesPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, GC, int, ffi.Pointer<ffi.Char>, int)>();

  int XSetFillRule(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetFillRule(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetFillRulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>('XSetFillRule');
  late final _XSetFillRule = _XSetFillRulePtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetFillStyle(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetFillStyle(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetFillStylePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>(
      'XSetFillStyle');
  late final _XSetFillStyle = _XSetFillStylePtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetFont(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetFont(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetFontPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, GC, Font)>>(
      'XSetFont');
  late final _XSetFont =
      _XSetFontPtr.asFunction<int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetFontPath(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    int arg2,
  ) {
    return _XSetFontPath(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetFontPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('XSetFontPath');
  late final _XSetFontPath = _XSetFontPathPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int XSetForeground(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetForeground(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetForegroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.UnsignedLong)>>('XSetForeground');
  late final _XSetForeground = _XSetForegroundPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetFunction(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetFunction(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>('XSetFunction');
  late final _XSetFunction = _XSetFunctionPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetGraphicsExposures(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetGraphicsExposures(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetGraphicsExposuresPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>(
      'XSetGraphicsExposures');
  late final _XSetGraphicsExposures = _XSetGraphicsExposuresPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetIconName(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _XSetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetIconNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Char>)>>('XSetIconName');
  late final _XSetIconName = _XSetIconNamePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>)>();

  int XSetInputFocus(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XSetInputFocus(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetInputFocusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, ffi.Int, Time)>>('XSetInputFocus');
  late final _XSetInputFocus = _XSetInputFocusPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XSetLineAttributes(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XSetLineAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XSetLineAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.UnsignedInt, ffi.Int,
              ffi.Int, ffi.Int)>>('XSetLineAttributes');
  late final _XSetLineAttributes = _XSetLineAttributesPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, int, int, int)>();

  int XSetModifierMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XModifierKeymap> arg1,
  ) {
    return _XSetModifierMapping(
      arg0,
      arg1,
    );
  }

  late final _XSetModifierMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>,
              ffi.Pointer<XModifierKeymap>)>>('XSetModifierMapping');
  late final _XSetModifierMapping = _XSetModifierMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XModifierKeymap>)>();

  int XSetPlaneMask(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetPlaneMask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetPlaneMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.UnsignedLong)>>('XSetPlaneMask');
  late final _XSetPlaneMask = _XSetPlaneMaskPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetPointerMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int arg2,
  ) {
    return _XSetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetPointerMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XSetPointerMapping');
  late final _XSetPointerMapping = _XSetPointerMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int XSetScreenSaver(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XSetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XSetScreenSaverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('XSetScreenSaver');
  late final _XSetScreenSaver = _XSetScreenSaverPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int)>();

  int XSetSelectionOwner(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XSetSelectionOwner(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetSelectionOwnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Atom, Window, Time)>>('XSetSelectionOwner');
  late final _XSetSelectionOwner = _XSetSelectionOwnerPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XSetState(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _XSetState(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XSetStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, ffi.UnsignedLong,
              ffi.UnsignedLong, ffi.Int, ffi.UnsignedLong)>>('XSetState');
  late final _XSetState = _XSetStatePtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, int, int, int)>();

  int XSetStipple(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetStipple(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetStipplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, Pixmap)>>('XSetStipple');
  late final _XSetStipple =
      _XSetStipplePtr.asFunction<int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetSubwindowMode(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetSubwindowMode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetSubwindowModePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<Display>, GC, ffi.Int)>>(
      'XSetSubwindowMode');
  late final _XSetSubwindowMode = _XSetSubwindowModePtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetTSOrigin(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
    int arg3,
  ) {
    return _XSetTSOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetTSOriginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, GC, ffi.Int, ffi.Int)>>('XSetTSOrigin');
  late final _XSetTSOrigin = _XSetTSOriginPtr.asFunction<
      int Function(ffi.Pointer<Display>, GC, int, int)>();

  int XSetTile(
    ffi.Pointer<Display> arg0,
    GC arg1,
    int arg2,
  ) {
    return _XSetTile(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetTilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, GC, Pixmap)>>('XSetTile');
  late final _XSetTile =
      _XSetTilePtr.asFunction<int Function(ffi.Pointer<Display>, GC, int)>();

  int XSetWindowBackground(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowBackgroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.UnsignedLong)>>('XSetWindowBackground');
  late final _XSetWindowBackground = _XSetWindowBackgroundPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XSetWindowBackgroundPixmap(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowBackgroundPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowBackgroundPixmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              Pixmap)>>('XSetWindowBackgroundPixmap');
  late final _XSetWindowBackgroundPixmap = _XSetWindowBackgroundPixmapPtr
      .asFunction<int Function(ffi.Pointer<Display>, int, int)>();

  int XSetWindowBorder(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowBorder(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.UnsignedLong)>>('XSetWindowBorder');
  late final _XSetWindowBorder = _XSetWindowBorderPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XSetWindowBorderPixmap(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowBorderPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowBorderPixmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, Pixmap)>>('XSetWindowBorderPixmap');
  late final _XSetWindowBorderPixmap = _XSetWindowBorderPixmapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XSetWindowBorderWidth(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowBorderWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowBorderWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.UnsignedInt)>>('XSetWindowBorderWidth');
  late final _XSetWindowBorderWidth = _XSetWindowBorderWidthPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XSetWindowColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XSetWindowColormap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetWindowColormapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, Window, Colormap)>>('XSetWindowColormap');
  late final _XSetWindowColormap = _XSetWindowColormapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int)>();

  int XStoreBuffer(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _XStoreBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XStoreBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('XStoreBuffer');
  late final _XStoreBuffer = _XStoreBufferPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>, int, int)>();

  int XStoreBytes(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _XStoreBytes(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XStoreBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XStoreBytes');
  late final _XStoreBytes = _XStoreBytesPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>, int)>();

  int XStoreColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    return _XStoreColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XStoreColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap,
              ffi.Pointer<XColor>)>>('XStoreColor');
  late final _XStoreColor = _XStoreColorPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>)>();

  int XStoreColors(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    return _XStoreColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XStoreColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Colormap, ffi.Pointer<XColor>,
              ffi.Int)>>('XStoreColors');
  late final _XStoreColors = _XStoreColorsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XColor>, int)>();

  int XStoreName(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _XStoreName(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XStoreNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Char>)>>('XStoreName');
  late final _XStoreName = _XStoreNamePtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>)>();

  int XStoreNamedColor(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
  ) {
    return _XStoreNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XStoreNamedColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Colormap,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              ffi.Int)>>('XStoreNamedColor');
  late final _XStoreNamedColor = _XStoreNamedColorPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, ffi.Pointer<ffi.Char>, int, int)>();

  int XSync(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XSync(
      arg0,
      arg1,
    );
  }

  late final _XSyncPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XSync');
  late final _XSync =
      _XSyncPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XTextExtents(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    return _XTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XTextExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<XFontStruct>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XCharStruct>)>>('XTextExtents');
  late final _XTextExtents = _XTextExtentsPtr.asFunction<
      int Function(
          ffi.Pointer<XFontStruct>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XCharStruct>)>();

  int XTextExtents16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    return _XTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XTextExtents16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<XFontStruct>,
              ffi.Pointer<XChar2b>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XCharStruct>)>>('XTextExtents16');
  late final _XTextExtents16 = _XTextExtents16Ptr.asFunction<
      int Function(
          ffi.Pointer<XFontStruct>,
          ffi.Pointer<XChar2b>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XCharStruct>)>();

  int XTextWidth(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _XTextWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XTextWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<XFontStruct>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XTextWidth');
  late final _XTextWidth = _XTextWidthPtr.asFunction<
      int Function(ffi.Pointer<XFontStruct>, ffi.Pointer<ffi.Char>, int)>();

  int XTextWidth16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
  ) {
    return _XTextWidth16(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XTextWidth16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<XFontStruct>, ffi.Pointer<XChar2b>,
              ffi.Int)>>('XTextWidth16');
  late final _XTextWidth16 = _XTextWidth16Ptr.asFunction<
      int Function(ffi.Pointer<XFontStruct>, ffi.Pointer<XChar2b>, int)>();

  int XTranslateCoordinates(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<Window> arg7,
  ) {
    return _XTranslateCoordinates(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XTranslateCoordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<Window>)>>('XTranslateCoordinates');
  late final _XTranslateCoordinates = _XTranslateCoordinatesPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<Window>)>();

  int XUndefineCursor(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUndefineCursor(
      arg0,
      arg1,
    );
  }

  late final _XUndefineCursorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XUndefineCursor');
  late final _XUndefineCursor =
      _XUndefineCursorPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XUngrabButton(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XUngrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XUngrabButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.UnsignedInt,
              ffi.UnsignedInt, Window)>>('XUngrabButton');
  late final _XUngrabButton = _XUngrabButtonPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XUngrabKey(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XUngrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XUngrabKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.UnsignedInt,
              Window)>>('XUngrabKey');
  late final _XUngrabKey = _XUngrabKeyPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XUngrabKeyboard(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUngrabKeyboard(
      arg0,
      arg1,
    );
  }

  late final _XUngrabKeyboardPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Time)>>(
          'XUngrabKeyboard');
  late final _XUngrabKeyboard =
      _XUngrabKeyboardPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XUngrabPointer(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUngrabPointer(
      arg0,
      arg1,
    );
  }

  late final _XUngrabPointerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Time)>>(
          'XUngrabPointer');
  late final _XUngrabPointer =
      _XUngrabPointerPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XUngrabServer(
    ffi.Pointer<Display> arg0,
  ) {
    return _XUngrabServer(
      arg0,
    );
  }

  late final _XUngrabServerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XUngrabServer');
  late final _XUngrabServer =
      _XUngrabServerPtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XUninstallColormap(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUninstallColormap(
      arg0,
      arg1,
    );
  }

  late final _XUninstallColormapPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Colormap)>>(
      'XUninstallColormap');
  late final _XUninstallColormap = _XUninstallColormapPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XUnloadFont(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUnloadFont(
      arg0,
      arg1,
    );
  }

  late final _XUnloadFontPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Font)>>(
          'XUnloadFont');
  late final _XUnloadFont =
      _XUnloadFontPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XUnmapSubwindows(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUnmapSubwindows(
      arg0,
      arg1,
    );
  }

  late final _XUnmapSubwindowsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XUnmapSubwindows');
  late final _XUnmapSubwindows = _XUnmapSubwindowsPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  int XUnmapWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XUnmapWindow(
      arg0,
      arg1,
    );
  }

  late final _XUnmapWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XUnmapWindow');
  late final _XUnmapWindow =
      _XUnmapWindowPtr.asFunction<int Function(ffi.Pointer<Display>, int)>();

  int XVendorRelease(
    ffi.Pointer<Display> arg0,
  ) {
    return _XVendorRelease(
      arg0,
    );
  }

  late final _XVendorReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XVendorRelease');
  late final _XVendorRelease =
      _XVendorReleasePtr.asFunction<int Function(ffi.Pointer<Display>)>();

  int XWarpPointer(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XWarpPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XWarpPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('XWarpPointer');
  late final _XWarpPointer = _XWarpPointerPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, int, int, int, int, int, int, int, int)>();

  int XWidthMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XWidthMMOfScreen(
      arg0,
    );
  }

  late final _XWidthMMOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XWidthMMOfScreen');
  late final _XWidthMMOfScreen =
      _XWidthMMOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XWidthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    return _XWidthOfScreen(
      arg0,
    );
  }

  late final _XWidthOfScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Screen>)>>(
          'XWidthOfScreen');
  late final _XWidthOfScreen =
      _XWidthOfScreenPtr.asFunction<int Function(ffi.Pointer<Screen>)>();

  int XWindowEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XEvent> arg3,
  ) {
    return _XWindowEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XWindowEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window, ffi.Long,
              ffi.Pointer<XEvent>)>>('XWindowEvent');
  late final _XWindowEvent = _XWindowEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, ffi.Pointer<XEvent>)>();

  int XWriteBitmapFile(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _XWriteBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XWriteBitmapFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              Pixmap,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('XWriteBitmapFile');
  late final _XWriteBitmapFile = _XWriteBitmapFilePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Char>, int, int, int,
          int, int)>();

  int XSupportsLocale() {
    return _XSupportsLocale();
  }

  late final _XSupportsLocalePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('XSupportsLocale');
  late final _XSupportsLocale =
      _XSupportsLocalePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> XSetLocaleModifiers(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _XSetLocaleModifiers(
      arg0,
    );
  }

  late final _XSetLocaleModifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('XSetLocaleModifiers');
  late final _XSetLocaleModifiers = _XSetLocaleModifiersPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  XOM XOpenOM(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _XOpenOM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XOpenOMPtr = _lookup<
      ffi.NativeFunction<
          XOM Function(ffi.Pointer<Display>, ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('XOpenOM');
  late final _XOpenOM = _XOpenOMPtr.asFunction<
      XOM Function(ffi.Pointer<Display>, ffi.Pointer<_XrmHashBucketRec>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int XCloseOM(
    XOM arg0,
  ) {
    return _XCloseOM(
      arg0,
    );
  }

  late final _XCloseOMPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(XOM)>>('XCloseOM');
  late final _XCloseOM = _XCloseOMPtr.asFunction<int Function(XOM)>();

  ffi.Pointer<ffi.Char> XSetOMValues(
    XOM arg0,
  ) {
    return _XSetOMValues(
      arg0,
    );
  }

  late final _XSetOMValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XOM)>>(
          'XSetOMValues');
  late final _XSetOMValues =
      _XSetOMValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XOM)>();

  ffi.Pointer<ffi.Char> XGetOMValues(
    XOM arg0,
  ) {
    return _XGetOMValues(
      arg0,
    );
  }

  late final _XGetOMValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XOM)>>(
          'XGetOMValues');
  late final _XGetOMValues =
      _XGetOMValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XOM)>();

  ffi.Pointer<Display> XDisplayOfOM(
    XOM arg0,
  ) {
    return _XDisplayOfOM(
      arg0,
    );
  }

  late final _XDisplayOfOMPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Display> Function(XOM)>>(
          'XDisplayOfOM');
  late final _XDisplayOfOM =
      _XDisplayOfOMPtr.asFunction<ffi.Pointer<Display> Function(XOM)>();

  ffi.Pointer<ffi.Char> XLocaleOfOM(
    XOM arg0,
  ) {
    return _XLocaleOfOM(
      arg0,
    );
  }

  late final _XLocaleOfOMPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XOM)>>(
          'XLocaleOfOM');
  late final _XLocaleOfOM =
      _XLocaleOfOMPtr.asFunction<ffi.Pointer<ffi.Char> Function(XOM)>();

  XOC XCreateOC(
    XOM arg0,
  ) {
    return _XCreateOC(
      arg0,
    );
  }

  late final _XCreateOCPtr =
      _lookup<ffi.NativeFunction<XOC Function(XOM)>>('XCreateOC');
  late final _XCreateOC = _XCreateOCPtr.asFunction<XOC Function(XOM)>();

  void XDestroyOC(
    XOC arg0,
  ) {
    return _XDestroyOC(
      arg0,
    );
  }

  late final _XDestroyOCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(XOC)>>('XDestroyOC');
  late final _XDestroyOC = _XDestroyOCPtr.asFunction<void Function(XOC)>();

  XOM XOMOfOC(
    XOC arg0,
  ) {
    return _XOMOfOC(
      arg0,
    );
  }

  late final _XOMOfOCPtr =
      _lookup<ffi.NativeFunction<XOM Function(XOC)>>('XOMOfOC');
  late final _XOMOfOC = _XOMOfOCPtr.asFunction<XOM Function(XOC)>();

  ffi.Pointer<ffi.Char> XSetOCValues(
    XOC arg0,
  ) {
    return _XSetOCValues(
      arg0,
    );
  }

  late final _XSetOCValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XOC)>>(
          'XSetOCValues');
  late final _XSetOCValues =
      _XSetOCValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XOC)>();

  ffi.Pointer<ffi.Char> XGetOCValues(
    XOC arg0,
  ) {
    return _XGetOCValues(
      arg0,
    );
  }

  late final _XGetOCValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XOC)>>(
          'XGetOCValues');
  late final _XGetOCValues =
      _XGetOCValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XOC)>();

  XFontSet XCreateFontSet(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg4,
  ) {
    return _XCreateFontSet(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XCreateFontSetPtr = _lookup<
      ffi.NativeFunction<
          XFontSet Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('XCreateFontSet');
  late final _XCreateFontSet = _XCreateFontSetPtr.asFunction<
      XFontSet Function(
          ffi.Pointer<Display>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void XFreeFontSet(
    ffi.Pointer<Display> arg0,
    XFontSet arg1,
  ) {
    return _XFreeFontSet(
      arg0,
      arg1,
    );
  }

  late final _XFreeFontSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, XFontSet)>>('XFreeFontSet');
  late final _XFreeFontSet = _XFreeFontSetPtr.asFunction<
      void Function(ffi.Pointer<Display>, XFontSet)>();

  int XFontsOfFontSet(
    XFontSet arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> arg2,
  ) {
    return _XFontsOfFontSet(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XFontsOfFontSetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  XFontSet,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>(
      'XFontsOfFontSet');
  late final _XFontsOfFontSet = _XFontsOfFontSetPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  ffi.Pointer<ffi.Char> XBaseFontNameListOfFontSet(
    XFontSet arg0,
  ) {
    return _XBaseFontNameListOfFontSet(
      arg0,
    );
  }

  late final _XBaseFontNameListOfFontSetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XFontSet)>>(
          'XBaseFontNameListOfFontSet');
  late final _XBaseFontNameListOfFontSet = _XBaseFontNameListOfFontSetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(XFontSet)>();

  ffi.Pointer<ffi.Char> XLocaleOfFontSet(
    XFontSet arg0,
  ) {
    return _XLocaleOfFontSet(
      arg0,
    );
  }

  late final _XLocaleOfFontSetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XFontSet)>>(
          'XLocaleOfFontSet');
  late final _XLocaleOfFontSet = _XLocaleOfFontSetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(XFontSet)>();

  int XContextDependentDrawing(
    XFontSet arg0,
  ) {
    return _XContextDependentDrawing(
      arg0,
    );
  }

  late final _XContextDependentDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(XFontSet)>>(
          'XContextDependentDrawing');
  late final _XContextDependentDrawing =
      _XContextDependentDrawingPtr.asFunction<int Function(XFontSet)>();

  int XDirectionalDependentDrawing(
    XFontSet arg0,
  ) {
    return _XDirectionalDependentDrawing(
      arg0,
    );
  }

  late final _XDirectionalDependentDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(XFontSet)>>(
          'XDirectionalDependentDrawing');
  late final _XDirectionalDependentDrawing =
      _XDirectionalDependentDrawingPtr.asFunction<int Function(XFontSet)>();

  int XContextualDrawing(
    XFontSet arg0,
  ) {
    return _XContextualDrawing(
      arg0,
    );
  }

  late final _XContextualDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(XFontSet)>>(
          'XContextualDrawing');
  late final _XContextualDrawing =
      _XContextualDrawingPtr.asFunction<int Function(XFontSet)>();

  ffi.Pointer<XFontSetExtents> XExtentsOfFontSet(
    XFontSet arg0,
  ) {
    return _XExtentsOfFontSet(
      arg0,
    );
  }

  late final _XExtentsOfFontSetPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<XFontSetExtents> Function(XFontSet)>>(
      'XExtentsOfFontSet');
  late final _XExtentsOfFontSet = _XExtentsOfFontSetPtr.asFunction<
      ffi.Pointer<XFontSetExtents> Function(XFontSet)>();

  int XmbTextEscapement(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _XmbTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XmbTextEscapementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet, ffi.Pointer<ffi.Char>, ffi.Int)>>('XmbTextEscapement');
  late final _XmbTextEscapement = _XmbTextEscapementPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.Char>, int)>();

  int XwcTextEscapement(
    XFontSet arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _XwcTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XwcTextEscapementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet, ffi.Pointer<ffi.WChar>, ffi.Int)>>('XwcTextEscapement');
  late final _XwcTextEscapement = _XwcTextEscapementPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.WChar>, int)>();

  int Xutf8TextEscapement(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _Xutf8TextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _Xutf8TextEscapementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(XFontSet, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Xutf8TextEscapement');
  late final _Xutf8TextEscapement = _Xutf8TextEscapementPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.Char>, int)>();

  int XmbTextExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    return _XmbTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XmbTextExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('XmbTextExtents');
  late final _XmbTextExtents = _XmbTextExtentsPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<XRectangle>, ffi.Pointer<XRectangle>)>();

  int XwcTextExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    return _XwcTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XwcTextExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.WChar>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('XwcTextExtents');
  late final _XwcTextExtents = _XwcTextExtentsPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<XRectangle>, ffi.Pointer<XRectangle>)>();

  int Xutf8TextExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    return _Xutf8TextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _Xutf8TextExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('Xutf8TextExtents');
  late final _Xutf8TextExtents = _Xutf8TextExtentsPtr.asFunction<
      int Function(XFontSet, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<XRectangle>, ffi.Pointer<XRectangle>)>();

  int XmbTextPerCharExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    return _XmbTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XmbTextPerCharExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('XmbTextPerCharExtents');
  late final _XmbTextPerCharExtents = _XmbTextPerCharExtentsPtr.asFunction<
      int Function(
          XFontSet,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>)>();

  int XwcTextPerCharExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    return _XwcTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XwcTextPerCharExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.WChar>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('XwcTextPerCharExtents');
  late final _XwcTextPerCharExtents = _XwcTextPerCharExtentsPtr.asFunction<
      int Function(
          XFontSet,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>)>();

  int Xutf8TextPerCharExtents(
    XFontSet arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    return _Xutf8TextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _Xutf8TextPerCharExtentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XFontSet,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<XRectangle>,
              ffi.Pointer<XRectangle>)>>('Xutf8TextPerCharExtents');
  late final _Xutf8TextPerCharExtents = _Xutf8TextPerCharExtentsPtr.asFunction<
      int Function(
          XFontSet,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<XRectangle>,
          ffi.Pointer<XRectangle>)>();

  void XmbDrawText(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    return _XmbDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XmbDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int,
              ffi.Int, ffi.Pointer<XmbTextItem>, ffi.Int)>>('XmbDrawText');
  late final _XmbDrawText = _XmbDrawTextPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XmbTextItem>, int)>();

  void XwcDrawText(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XwcTextItem> arg5,
    int arg6,
  ) {
    return _XwcDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XwcDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int,
              ffi.Int, ffi.Pointer<XwcTextItem>, ffi.Int)>>('XwcDrawText');
  late final _XwcDrawText = _XwcDrawTextPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XwcTextItem>, int)>();

  void Xutf8DrawText(
    ffi.Pointer<Display> arg0,
    int arg1,
    GC arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    return _Xutf8DrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _Xutf8DrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, Drawable, GC, ffi.Int,
              ffi.Int, ffi.Pointer<XmbTextItem>, ffi.Int)>>('Xutf8DrawText');
  late final _Xutf8DrawText = _Xutf8DrawTextPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, GC, int, int,
          ffi.Pointer<XmbTextItem>, int)>();

  void XmbDrawString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Char> arg6,
    int arg7,
  ) {
    return _XmbDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XmbDrawStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XmbDrawString');
  late final _XmbDrawString = _XmbDrawStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  void XwcDrawString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.WChar> arg6,
    int arg7,
  ) {
    return _XwcDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XwcDrawStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.WChar>,
              ffi.Int)>>('XwcDrawString');
  late final _XwcDrawString = _XwcDrawStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.WChar>, int)>();

  void Xutf8DrawString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Char> arg6,
    int arg7,
  ) {
    return _Xutf8DrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _Xutf8DrawStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Xutf8DrawString');
  late final _Xutf8DrawString = _Xutf8DrawStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  void XmbDrawImageString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Char> arg6,
    int arg7,
  ) {
    return _XmbDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XmbDrawImageStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('XmbDrawImageString');
  late final _XmbDrawImageString = _XmbDrawImageStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  void XwcDrawImageString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.WChar> arg6,
    int arg7,
  ) {
    return _XwcDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XwcDrawImageStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.WChar>,
              ffi.Int)>>('XwcDrawImageString');
  late final _XwcDrawImageString = _XwcDrawImageStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.WChar>, int)>();

  void Xutf8DrawImageString(
    ffi.Pointer<Display> arg0,
    int arg1,
    XFontSet arg2,
    GC arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Char> arg6,
    int arg7,
  ) {
    return _Xutf8DrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _Xutf8DrawImageStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              Drawable,
              XFontSet,
              GC,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Xutf8DrawImageString');
  late final _Xutf8DrawImageString = _Xutf8DrawImageStringPtr.asFunction<
      void Function(ffi.Pointer<Display>, int, XFontSet, GC, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  XIM XOpenIM(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _XOpenIM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XOpenIMPtr = _lookup<
      ffi.NativeFunction<
          XIM Function(ffi.Pointer<Display>, ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('XOpenIM');
  late final _XOpenIM = _XOpenIMPtr.asFunction<
      XIM Function(ffi.Pointer<Display>, ffi.Pointer<_XrmHashBucketRec>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int XCloseIM(
    XIM arg0,
  ) {
    return _XCloseIM(
      arg0,
    );
  }

  late final _XCloseIMPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(XIM)>>('XCloseIM');
  late final _XCloseIM = _XCloseIMPtr.asFunction<int Function(XIM)>();

  ffi.Pointer<ffi.Char> XGetIMValues(
    XIM arg0,
  ) {
    return _XGetIMValues(
      arg0,
    );
  }

  late final _XGetIMValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIM)>>(
          'XGetIMValues');
  late final _XGetIMValues =
      _XGetIMValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIM)>();

  ffi.Pointer<ffi.Char> XSetIMValues(
    XIM arg0,
  ) {
    return _XSetIMValues(
      arg0,
    );
  }

  late final _XSetIMValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIM)>>(
          'XSetIMValues');
  late final _XSetIMValues =
      _XSetIMValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIM)>();

  ffi.Pointer<Display> XDisplayOfIM(
    XIM arg0,
  ) {
    return _XDisplayOfIM(
      arg0,
    );
  }

  late final _XDisplayOfIMPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Display> Function(XIM)>>(
          'XDisplayOfIM');
  late final _XDisplayOfIM =
      _XDisplayOfIMPtr.asFunction<ffi.Pointer<Display> Function(XIM)>();

  ffi.Pointer<ffi.Char> XLocaleOfIM(
    XIM arg0,
  ) {
    return _XLocaleOfIM(
      arg0,
    );
  }

  late final _XLocaleOfIMPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIM)>>(
          'XLocaleOfIM');
  late final _XLocaleOfIM =
      _XLocaleOfIMPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIM)>();

  XIC XCreateIC(
    XIM arg0,
  ) {
    return _XCreateIC(
      arg0,
    );
  }

  late final _XCreateICPtr =
      _lookup<ffi.NativeFunction<XIC Function(XIM)>>('XCreateIC');
  late final _XCreateIC = _XCreateICPtr.asFunction<XIC Function(XIM)>();

  void XDestroyIC(
    XIC arg0,
  ) {
    return _XDestroyIC(
      arg0,
    );
  }

  late final _XDestroyICPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(XIC)>>('XDestroyIC');
  late final _XDestroyIC = _XDestroyICPtr.asFunction<void Function(XIC)>();

  void XSetICFocus(
    XIC arg0,
  ) {
    return _XSetICFocus(
      arg0,
    );
  }

  late final _XSetICFocusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(XIC)>>('XSetICFocus');
  late final _XSetICFocus = _XSetICFocusPtr.asFunction<void Function(XIC)>();

  void XUnsetICFocus(
    XIC arg0,
  ) {
    return _XUnsetICFocus(
      arg0,
    );
  }

  late final _XUnsetICFocusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(XIC)>>('XUnsetICFocus');
  late final _XUnsetICFocus =
      _XUnsetICFocusPtr.asFunction<void Function(XIC)>();

  ffi.Pointer<ffi.WChar> XwcResetIC(
    XIC arg0,
  ) {
    return _XwcResetIC(
      arg0,
    );
  }

  late final _XwcResetICPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function(XIC)>>(
          'XwcResetIC');
  late final _XwcResetIC =
      _XwcResetICPtr.asFunction<ffi.Pointer<ffi.WChar> Function(XIC)>();

  ffi.Pointer<ffi.Char> XmbResetIC(
    XIC arg0,
  ) {
    return _XmbResetIC(
      arg0,
    );
  }

  late final _XmbResetICPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIC)>>(
          'XmbResetIC');
  late final _XmbResetIC =
      _XmbResetICPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIC)>();

  ffi.Pointer<ffi.Char> Xutf8ResetIC(
    XIC arg0,
  ) {
    return _Xutf8ResetIC(
      arg0,
    );
  }

  late final _Xutf8ResetICPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIC)>>(
          'Xutf8ResetIC');
  late final _Xutf8ResetIC =
      _Xutf8ResetICPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIC)>();

  ffi.Pointer<ffi.Char> XSetICValues(
    XIC arg0,
  ) {
    return _XSetICValues(
      arg0,
    );
  }

  late final _XSetICValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIC)>>(
          'XSetICValues');
  late final _XSetICValues =
      _XSetICValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIC)>();

  ffi.Pointer<ffi.Char> XGetICValues(
    XIC arg0,
  ) {
    return _XGetICValues(
      arg0,
    );
  }

  late final _XGetICValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(XIC)>>(
          'XGetICValues');
  late final _XGetICValues =
      _XGetICValuesPtr.asFunction<ffi.Pointer<ffi.Char> Function(XIC)>();

  XIM XIMOfIC(
    XIC arg0,
  ) {
    return _XIMOfIC(
      arg0,
    );
  }

  late final _XIMOfICPtr =
      _lookup<ffi.NativeFunction<XIM Function(XIC)>>('XIMOfIC');
  late final _XIMOfIC = _XIMOfICPtr.asFunction<XIM Function(XIC)>();

  int XFilterEvent(
    ffi.Pointer<XEvent> arg0,
    int arg1,
  ) {
    return _XFilterEvent(
      arg0,
      arg1,
    );
  }

  late final _XFilterEventPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<XEvent>, Window)>>(
      'XFilterEvent');
  late final _XFilterEvent =
      _XFilterEventPtr.asFunction<int Function(ffi.Pointer<XEvent>, int)>();

  int XmbLookupString(
    XIC arg0,
    ffi.Pointer<XKeyPressedEvent> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<KeySym> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _XmbLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XmbLookupStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XIC,
              ffi.Pointer<XKeyPressedEvent>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<KeySym>,
              ffi.Pointer<ffi.Int>)>>('XmbLookupString');
  late final _XmbLookupString = _XmbLookupStringPtr.asFunction<
      int Function(XIC, ffi.Pointer<XKeyPressedEvent>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<KeySym>, ffi.Pointer<ffi.Int>)>();

  int XwcLookupString(
    XIC arg0,
    ffi.Pointer<XKeyPressedEvent> arg1,
    ffi.Pointer<ffi.WChar> arg2,
    int arg3,
    ffi.Pointer<KeySym> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _XwcLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XwcLookupStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XIC,
              ffi.Pointer<XKeyPressedEvent>,
              ffi.Pointer<ffi.WChar>,
              ffi.Int,
              ffi.Pointer<KeySym>,
              ffi.Pointer<ffi.Int>)>>('XwcLookupString');
  late final _XwcLookupString = _XwcLookupStringPtr.asFunction<
      int Function(XIC, ffi.Pointer<XKeyPressedEvent>, ffi.Pointer<ffi.WChar>,
          int, ffi.Pointer<KeySym>, ffi.Pointer<ffi.Int>)>();

  int Xutf8LookupString(
    XIC arg0,
    ffi.Pointer<XKeyPressedEvent> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<KeySym> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _Xutf8LookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _Xutf8LookupStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              XIC,
              ffi.Pointer<XKeyPressedEvent>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<KeySym>,
              ffi.Pointer<ffi.Int>)>>('Xutf8LookupString');
  late final _Xutf8LookupString = _Xutf8LookupStringPtr.asFunction<
      int Function(XIC, ffi.Pointer<XKeyPressedEvent>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<KeySym>, ffi.Pointer<ffi.Int>)>();

  XVaNestedList XVaCreateNestedList(
    int arg0,
  ) {
    return _XVaCreateNestedList(
      arg0,
    );
  }

  late final _XVaCreateNestedListPtr =
      _lookup<ffi.NativeFunction<XVaNestedList Function(ffi.Int)>>(
          'XVaCreateNestedList');
  late final _XVaCreateNestedList =
      _XVaCreateNestedListPtr.asFunction<XVaNestedList Function(int)>();

  int XRegisterIMInstantiateCallback(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    XIDProc arg4,
    XPointer arg5,
  ) {
    return _XRegisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XRegisterIMInstantiateCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              XIDProc,
              XPointer)>>('XRegisterIMInstantiateCallback');
  late final _XRegisterIMInstantiateCallback =
      _XRegisterIMInstantiateCallbackPtr.asFunction<
          int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              XIDProc,
              XPointer)>();

  int XUnregisterIMInstantiateCallback(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    XIDProc arg4,
    XPointer arg5,
  ) {
    return _XUnregisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XUnregisterIMInstantiateCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              XIDProc,
              XPointer)>>('XUnregisterIMInstantiateCallback');
  late final _XUnregisterIMInstantiateCallback =
      _XUnregisterIMInstantiateCallbackPtr.asFunction<
          int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<_XrmHashBucketRec>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              XIDProc,
              XPointer)>();

  int XInternalConnectionNumbers(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int>> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XInternalConnectionNumbers(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XInternalConnectionNumbersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('XInternalConnectionNumbers');
  late final _XInternalConnectionNumbers =
      _XInternalConnectionNumbersPtr.asFunction<
          int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>();

  void XProcessInternalConnection(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XProcessInternalConnection(
      arg0,
      arg1,
    );
  }

  late final _XProcessInternalConnectionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XProcessInternalConnection');
  late final _XProcessInternalConnection = _XProcessInternalConnectionPtr
      .asFunction<void Function(ffi.Pointer<Display>, int)>();

  int XAddConnectionWatch(
    ffi.Pointer<Display> arg0,
    XConnectionWatchProc arg1,
    XPointer arg2,
  ) {
    return _XAddConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XAddConnectionWatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, XConnectionWatchProc,
              XPointer)>>('XAddConnectionWatch');
  late final _XAddConnectionWatch = _XAddConnectionWatchPtr.asFunction<
      int Function(ffi.Pointer<Display>, XConnectionWatchProc, XPointer)>();

  void XRemoveConnectionWatch(
    ffi.Pointer<Display> arg0,
    XConnectionWatchProc arg1,
    XPointer arg2,
  ) {
    return _XRemoveConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XRemoveConnectionWatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, XConnectionWatchProc,
              XPointer)>>('XRemoveConnectionWatch');
  late final _XRemoveConnectionWatch = _XRemoveConnectionWatchPtr.asFunction<
      void Function(ffi.Pointer<Display>, XConnectionWatchProc, XPointer)>();

  void XSetAuthorization(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _XSetAuthorization(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetAuthorizationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('XSetAuthorization');
  late final _XSetAuthorization = _XSetAuthorizationPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int _Xmbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return __Xmbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __XmbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('_Xmbtowc');
  late final __Xmbtowc = __XmbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _Xwctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return __Xwctomb(
      arg0,
      arg1,
    );
  }

  late final __XwctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('_Xwctomb');
  late final __Xwctomb =
      __XwctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int XGetEventData(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    return _XGetEventData(
      arg0,
      arg1,
    );
  }

  late final _XGetEventDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>,
              ffi.Pointer<XGenericEventCookie>)>>('XGetEventData');
  late final _XGetEventData = _XGetEventDataPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XGenericEventCookie>)>();

  void XFreeEventData(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    return _XFreeEventData(
      arg0,
      arg1,
    );
  }

  late final _XFreeEventDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>,
              ffi.Pointer<XGenericEventCookie>)>>('XFreeEventData');
  late final _XFreeEventData = _XFreeEventDataPtr.asFunction<
      void Function(ffi.Pointer<Display>, ffi.Pointer<XGenericEventCookie>)>();

  int _XiGetDevicePresenceNotifyEvent(
    ffi.Pointer<Display> arg0,
  ) {
    return __XiGetDevicePresenceNotifyEvent(
      arg0,
    );
  }

  late final __XiGetDevicePresenceNotifyEventPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          '_XiGetDevicePresenceNotifyEvent');
  late final __XiGetDevicePresenceNotifyEvent =
      __XiGetDevicePresenceNotifyEventPtr
          .asFunction<int Function(ffi.Pointer<Display>)>();

  void _xibaddevice(
    ffi.Pointer<Display> dpy,
    ffi.Pointer<ffi.Int> error,
  ) {
    return __xibaddevice(
      dpy,
      error,
    );
  }

  late final __xibaddevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('_xibaddevice');
  late final __xibaddevice = __xibaddevicePtr
      .asFunction<void Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  void _xibadclass(
    ffi.Pointer<Display> dpy,
    ffi.Pointer<ffi.Int> error,
  ) {
    return __xibadclass(
      dpy,
      error,
    );
  }

  late final __xibadclassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('_xibadclass');
  late final __xibadclass = __xibadclassPtr
      .asFunction<void Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  void _xibadevent(
    ffi.Pointer<Display> dpy,
    ffi.Pointer<ffi.Int> error,
  ) {
    return __xibadevent(
      dpy,
      error,
    );
  }

  late final __xibadeventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('_xibadevent');
  late final __xibadevent = __xibadeventPtr
      .asFunction<void Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  void _xibadmode(
    ffi.Pointer<Display> dpy,
    ffi.Pointer<ffi.Int> error,
  ) {
    return __xibadmode(
      dpy,
      error,
    );
  }

  late final __xibadmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('_xibadmode');
  late final __xibadmode = __xibadmodePtr
      .asFunction<void Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  void _xidevicebusy(
    ffi.Pointer<Display> dpy,
    ffi.Pointer<ffi.Int> error,
  ) {
    return __xidevicebusy(
      dpy,
      error,
    );
  }

  late final __xidevicebusyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>>('_xidevicebusy');
  late final __xidevicebusy = __xidevicebusyPtr
      .asFunction<void Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  int XChangeKeyboardDevice(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
  ) {
    return _XChangeKeyboardDevice(
      arg0,
      arg1,
    );
  }

  late final _XChangeKeyboardDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>,
              ffi.Pointer<XDevice>)>>('XChangeKeyboardDevice');
  late final _XChangeKeyboardDevice = _XChangeKeyboardDevicePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>)>();

  int XChangePointerDevice(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
  ) {
    return _XChangePointerDevice(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangePointerDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, ffi.Int,
              ffi.Int)>>('XChangePointerDevice');
  late final _XChangePointerDevice = _XChangePointerDevicePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int)>();

  int XGrabDevice(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XEventClass> arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _XGrabDevice(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _XGrabDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<XEventClass>,
              ffi.Int,
              ffi.Int,
              Time)>>('XGrabDevice');
  late final _XGrabDevice = _XGrabDevicePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int, int,
          ffi.Pointer<XEventClass>, int, int, int)>();

  int XUngrabDevice(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
  ) {
    return _XUngrabDevice(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XUngrabDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              Time)>>('XUngrabDevice');
  late final _XUngrabDevice = _XUngrabDevicePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int)>();

  int XGrabDeviceKey(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XDevice> arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XEventClass> arg8,
    int arg9,
    int arg10,
  ) {
    return _XGrabDeviceKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _XGrabDeviceKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<XDevice>,
              Window,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<XEventClass>,
              ffi.Int,
              ffi.Int)>>('XGrabDeviceKey');
  late final _XGrabDeviceKey = _XGrabDeviceKeyPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XDevice>,
          int,
          int,
          ffi.Pointer<XDevice>,
          int,
          int,
          int,
          ffi.Pointer<XEventClass>,
          int,
          int)>();

  int XUngrabDeviceKey(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XDevice> arg4,
    int arg5,
  ) {
    return _XUngrabDeviceKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XUngrabDeviceKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<XDevice>,
              Window)>>('XUngrabDeviceKey');
  late final _XUngrabDeviceKey = _XUngrabDeviceKeyPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
          ffi.Pointer<XDevice>, int)>();

  int XGrabDeviceButton(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XDevice> arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XEventClass> arg8,
    int arg9,
    int arg10,
  ) {
    return _XGrabDeviceButton(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _XGrabDeviceButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<XDevice>,
              Window,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<XEventClass>,
              ffi.Int,
              ffi.Int)>>('XGrabDeviceButton');
  late final _XGrabDeviceButton = _XGrabDeviceButtonPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XDevice>,
          int,
          int,
          ffi.Pointer<XDevice>,
          int,
          int,
          int,
          ffi.Pointer<XEventClass>,
          int,
          int)>();

  int XUngrabDeviceButton(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XDevice> arg4,
    int arg5,
  ) {
    return _XUngrabDeviceButton(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XUngrabDeviceButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<XDevice>,
              Window)>>('XUngrabDeviceButton');
  late final _XUngrabDeviceButton = _XUngrabDeviceButtonPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
          ffi.Pointer<XDevice>, int)>();

  int XAllowDeviceEvents(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
  ) {
    return _XAllowDeviceEvents(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XAllowDeviceEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, ffi.Int,
              Time)>>('XAllowDeviceEvents');
  late final _XAllowDeviceEvents = _XAllowDeviceEventsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int)>();

  int XGetDeviceFocus(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<Window> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<Time> arg4,
  ) {
    return _XGetDeviceFocus(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XGetDeviceFocusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Pointer<Window>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<Time>)>>('XGetDeviceFocus');
  late final _XGetDeviceFocus = _XGetDeviceFocusPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
          ffi.Pointer<Window>, ffi.Pointer<ffi.Int>, ffi.Pointer<Time>)>();

  int XSetDeviceFocus(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XSetDeviceFocus(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XSetDeviceFocusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, Window,
              ffi.Int, Time)>>('XSetDeviceFocus');
  late final _XSetDeviceFocus = _XSetDeviceFocusPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int, int)>();

  ffi.Pointer<XFeedbackState> XGetFeedbackControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XGetFeedbackControl(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetFeedbackControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XFeedbackState> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Pointer<ffi.Int>)>>('XGetFeedbackControl');
  late final _XGetFeedbackControl = _XGetFeedbackControlPtr.asFunction<
      ffi.Pointer<XFeedbackState> Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>, ffi.Pointer<ffi.Int>)>();

  void XFreeFeedbackList(
    ffi.Pointer<XFeedbackState> arg0,
  ) {
    return _XFreeFeedbackList(
      arg0,
    );
  }

  late final _XFreeFeedbackListPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XFeedbackState>)>>(
      'XFreeFeedbackList');
  late final _XFreeFeedbackList = _XFreeFeedbackListPtr.asFunction<
      void Function(ffi.Pointer<XFeedbackState>)>();

  int XChangeFeedbackControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    ffi.Pointer<XFeedbackControl> arg3,
  ) {
    return _XChangeFeedbackControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangeFeedbackControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedLong,
              ffi.Pointer<XFeedbackControl>)>>('XChangeFeedbackControl');
  late final _XChangeFeedbackControl = _XChangeFeedbackControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int,
          ffi.Pointer<XFeedbackControl>)>();

  int XDeviceBell(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XDeviceBell(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XDeviceBellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, XID, XID,
              ffi.Int)>>('XDeviceBell');
  late final _XDeviceBell = _XDeviceBellPtr.asFunction<
      int Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int, int)>();

  ffi.Pointer<KeySym> XGetDeviceKeyMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _XGetDeviceKeyMapping(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XGetDeviceKeyMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KeySym> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              KeyCode,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('XGetDeviceKeyMapping');
  late final _XGetDeviceKeyMapping = _XGetDeviceKeyMappingPtr.asFunction<
      ffi.Pointer<KeySym> Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
          int, int, ffi.Pointer<ffi.Int>)>();

  int XChangeDeviceKeyMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<KeySym> arg4,
    int arg5,
  ) {
    return _XChangeDeviceKeyMapping(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XChangeDeviceKeyMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<KeySym>,
              ffi.Int)>>('XChangeDeviceKeyMapping');
  late final _XChangeDeviceKeyMapping = _XChangeDeviceKeyMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
          ffi.Pointer<KeySym>, int)>();

  ffi.Pointer<XModifierKeymap> XGetDeviceModifierMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
  ) {
    return _XGetDeviceModifierMapping(
      arg0,
      arg1,
    );
  }

  late final _XGetDeviceModifierMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XModifierKeymap> Function(ffi.Pointer<Display>,
              ffi.Pointer<XDevice>)>>('XGetDeviceModifierMapping');
  late final _XGetDeviceModifierMapping =
      _XGetDeviceModifierMappingPtr.asFunction<
          ffi.Pointer<XModifierKeymap> Function(
              ffi.Pointer<Display>, ffi.Pointer<XDevice>)>();

  int XSetDeviceModifierMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<XModifierKeymap> arg2,
  ) {
    return _XSetDeviceModifierMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetDeviceModifierMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              ffi.Pointer<XModifierKeymap>)>>('XSetDeviceModifierMapping');
  late final _XSetDeviceModifierMapping =
      _XSetDeviceModifierMappingPtr.asFunction<
          int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              ffi.Pointer<XModifierKeymap>)>();

  int XSetDeviceButtonMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
    int arg3,
  ) {
    return _XSetDeviceButtonMapping(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSetDeviceButtonMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XSetDeviceButtonMapping');
  late final _XSetDeviceButtonMapping = _XSetDeviceButtonMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int XGetDeviceButtonMapping(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
    int arg3,
  ) {
    return _XGetDeviceButtonMapping(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XGetDeviceButtonMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('XGetDeviceButtonMapping');
  late final _XGetDeviceButtonMapping = _XGetDeviceButtonMappingPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<XDeviceState> XQueryDeviceState(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
  ) {
    return _XQueryDeviceState(
      arg0,
      arg1,
    );
  }

  late final _XQueryDeviceStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XDeviceState> Function(ffi.Pointer<Display>,
              ffi.Pointer<XDevice>)>>('XQueryDeviceState');
  late final _XQueryDeviceState = _XQueryDeviceStatePtr.asFunction<
      ffi.Pointer<XDeviceState> Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>)>();

  void XFreeDeviceState(
    ffi.Pointer<XDeviceState> arg0,
  ) {
    return _XFreeDeviceState(
      arg0,
    );
  }

  late final _XFreeDeviceStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XDeviceState>)>>(
          'XFreeDeviceState');
  late final _XFreeDeviceState = _XFreeDeviceStatePtr.asFunction<
      void Function(ffi.Pointer<XDeviceState>)>();

  ffi.Pointer<XExtensionVersion> XGetExtensionVersion(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _XGetExtensionVersion(
      arg0,
      arg1,
    );
  }

  late final _XGetExtensionVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XExtensionVersion> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Char>)>>('XGetExtensionVersion');
  late final _XGetExtensionVersion = _XGetExtensionVersionPtr.asFunction<
      ffi.Pointer<XExtensionVersion> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<XDeviceInfo> XListInputDevices(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _XListInputDevices(
      arg0,
      arg1,
    );
  }

  late final _XListInputDevicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XDeviceInfo> Function(ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>)>>('XListInputDevices');
  late final _XListInputDevices = _XListInputDevicesPtr.asFunction<
      ffi.Pointer<XDeviceInfo> Function(
          ffi.Pointer<Display>, ffi.Pointer<ffi.Int>)>();

  void XFreeDeviceList(
    ffi.Pointer<XDeviceInfo> arg0,
  ) {
    return _XFreeDeviceList(
      arg0,
    );
  }

  late final _XFreeDeviceListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XDeviceInfo>)>>(
          'XFreeDeviceList');
  late final _XFreeDeviceList =
      _XFreeDeviceListPtr.asFunction<void Function(ffi.Pointer<XDeviceInfo>)>();

  ffi.Pointer<XDevice> XOpenDevice(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XOpenDevice(
      arg0,
      arg1,
    );
  }

  late final _XOpenDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XDevice> Function(
              ffi.Pointer<Display>, XID)>>('XOpenDevice');
  late final _XOpenDevice = _XOpenDevicePtr.asFunction<
      ffi.Pointer<XDevice> Function(ffi.Pointer<Display>, int)>();

  int XCloseDevice(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
  ) {
    return _XCloseDevice(
      arg0,
      arg1,
    );
  }

  late final _XCloseDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>, ffi.Pointer<XDevice>)>>('XCloseDevice');
  late final _XCloseDevice = _XCloseDevicePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>)>();

  int XSetDeviceMode(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
  ) {
    return _XSetDeviceMode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XSetDeviceModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              ffi.Int)>>('XSetDeviceMode');
  late final _XSetDeviceMode = _XSetDeviceModePtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int)>();

  int XSetDeviceValuators(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
    int arg4,
  ) {
    return _XSetDeviceValuators(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XSetDeviceValuatorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int)>>('XSetDeviceValuators');
  late final _XSetDeviceValuators = _XSetDeviceValuatorsPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
          ffi.Pointer<ffi.Int>, int, int)>();

  ffi.Pointer<XDeviceControl> XGetDeviceControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
  ) {
    return _XGetDeviceControl(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetDeviceControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XDeviceControl> Function(ffi.Pointer<Display>,
              ffi.Pointer<XDevice>, ffi.Int)>>('XGetDeviceControl');
  late final _XGetDeviceControl = _XGetDeviceControlPtr.asFunction<
      ffi.Pointer<XDeviceControl> Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>, int)>();

  int XChangeDeviceControl(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    ffi.Pointer<XDeviceControl> arg3,
  ) {
    return _XChangeDeviceControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XChangeDeviceControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, ffi.Int,
              ffi.Pointer<XDeviceControl>)>>('XChangeDeviceControl');
  late final _XChangeDeviceControl = _XChangeDeviceControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int,
          ffi.Pointer<XDeviceControl>)>();

  int XSelectExtensionEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<XEventClass> arg2,
    int arg3,
  ) {
    return _XSelectExtensionEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XSelectExtensionEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<XEventClass>, ffi.Int)>>('XSelectExtensionEvent');
  late final _XSelectExtensionEvent = _XSelectExtensionEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, ffi.Pointer<XEventClass>, int)>();

  int XGetSelectedExtensionEvents(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Pointer<XEventClass>> arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Pointer<XEventClass>> arg5,
  ) {
    return _XGetSelectedExtensionEvents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XGetSelectedExtensionEventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<Display>,
                  Window,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Pointer<XEventClass>>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Pointer<XEventClass>>)>>(
      'XGetSelectedExtensionEvents');
  late final _XGetSelectedExtensionEvents =
      _XGetSelectedExtensionEventsPtr.asFunction<
          int Function(
              ffi.Pointer<Display>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<XEventClass>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<XEventClass>>)>();

  int XChangeDeviceDontPropagateList(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XEventClass> arg3,
    int arg4,
  ) {
    return _XChangeDeviceDontPropagateList(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XChangeDeviceDontPropagateListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              Window,
              ffi.Int,
              ffi.Pointer<XEventClass>,
              ffi.Int)>>('XChangeDeviceDontPropagateList');
  late final _XChangeDeviceDontPropagateList =
      _XChangeDeviceDontPropagateListPtr.asFunction<
          int Function(
              ffi.Pointer<Display>, int, int, ffi.Pointer<XEventClass>, int)>();

  ffi.Pointer<XEventClass> XGetDeviceDontPropagateList(
    ffi.Pointer<Display> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XGetDeviceDontPropagateList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XGetDeviceDontPropagateListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XEventClass> Function(ffi.Pointer<Display>, Window,
              ffi.Pointer<ffi.Int>)>>('XGetDeviceDontPropagateList');
  late final _XGetDeviceDontPropagateList =
      _XGetDeviceDontPropagateListPtr.asFunction<
          ffi.Pointer<XEventClass> Function(
              ffi.Pointer<Display>, int, ffi.Pointer<ffi.Int>)>();

  int XSendExtensionEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XEventClass> arg5,
    ffi.Pointer<XEvent> arg6,
  ) {
    return _XSendExtensionEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XSendExtensionEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              Window,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<XEventClass>,
              ffi.Pointer<XEvent>)>>('XSendExtensionEvent');
  late final _XSendExtensionEvent = _XSendExtensionEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int, int,
          ffi.Pointer<XEventClass>, ffi.Pointer<XEvent>)>();

  ffi.Pointer<XDeviceTimeCoord> XGetDeviceMotionEvents(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    ffi.Pointer<ffi.Int> arg5,
    ffi.Pointer<ffi.Int> arg6,
  ) {
    return _XGetDeviceMotionEvents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XGetDeviceMotionEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XDeviceTimeCoord> Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              Time,
              Time,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XGetDeviceMotionEvents');
  late final _XGetDeviceMotionEvents = _XGetDeviceMotionEventsPtr.asFunction<
      ffi.Pointer<XDeviceTimeCoord> Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XDevice>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  void XFreeDeviceMotionEvents(
    ffi.Pointer<XDeviceTimeCoord> arg0,
  ) {
    return _XFreeDeviceMotionEvents(
      arg0,
    );
  }

  late final _XFreeDeviceMotionEventsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XDeviceTimeCoord>)>>(
      'XFreeDeviceMotionEvents');
  late final _XFreeDeviceMotionEvents = _XFreeDeviceMotionEventsPtr.asFunction<
      void Function(ffi.Pointer<XDeviceTimeCoord>)>();

  void XFreeDeviceControl(
    ffi.Pointer<XDeviceControl> arg0,
  ) {
    return _XFreeDeviceControl(
      arg0,
    );
  }

  late final _XFreeDeviceControlPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XDeviceControl>)>>(
      'XFreeDeviceControl');
  late final _XFreeDeviceControl = _XFreeDeviceControlPtr.asFunction<
      void Function(ffi.Pointer<XDeviceControl>)>();

  ffi.Pointer<Atom> XListDeviceProperties(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _XListDeviceProperties(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XListDevicePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Atom> Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              ffi.Pointer<ffi.Int>)>>('XListDeviceProperties');
  late final _XListDeviceProperties = _XListDevicePropertiesPtr.asFunction<
      ffi.Pointer<Atom> Function(
          ffi.Pointer<Display>, ffi.Pointer<XDevice>, ffi.Pointer<ffi.Int>)>();

  void XChangeDeviceProperty(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.UnsignedChar> arg6,
    int arg7,
  ) {
    return _XChangeDeviceProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _XChangeDevicePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              Atom,
              Atom,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('XChangeDeviceProperty');
  late final _XChangeDeviceProperty = _XChangeDevicePropertyPtr.asFunction<
      void Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int, int,
          int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void XDeleteDeviceProperty(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
  ) {
    return _XDeleteDeviceProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XDeleteDevicePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>,
              Atom)>>('XDeleteDeviceProperty');
  late final _XDeleteDeviceProperty = _XDeleteDevicePropertyPtr.asFunction<
      void Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int)>();

  int XGetDeviceProperty(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<Atom> arg7,
    ffi.Pointer<ffi.Int> arg8,
    ffi.Pointer<ffi.UnsignedLong> arg9,
    ffi.Pointer<ffi.UnsignedLong> arg10,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> arg11,
  ) {
    return _XGetDeviceProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  late final _XGetDevicePropertyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<Display>,
                  ffi.Pointer<XDevice>,
                  Atom,
                  ffi.Long,
                  ffi.Long,
                  ffi.Int,
                  Atom,
                  ffi.Pointer<Atom>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'XGetDeviceProperty');
  late final _XGetDeviceProperty = _XGetDevicePropertyPtr.asFunction<
      int Function(
          ffi.Pointer<Display>,
          ffi.Pointer<XDevice>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<Atom>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int XTestQueryExtension(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _XTestQueryExtension(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XTestQueryExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('XTestQueryExtension');
  late final _XTestQueryExtension = _XTestQueryExtensionPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int XTestCompareCursorWithWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
  ) {
    return _XTestCompareCursorWithWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XTestCompareCursorWithWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, Window,
              Cursor)>>('XTestCompareCursorWithWindow');
  late final _XTestCompareCursorWithWindow = _XTestCompareCursorWithWindowPtr
      .asFunction<int Function(ffi.Pointer<Display>, int, int)>();

  int XTestCompareCurrentCursorWithWindow(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XTestCompareCurrentCursorWithWindow(
      arg0,
      arg1,
    );
  }

  late final _XTestCompareCurrentCursorWithWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, Window)>>(
      'XTestCompareCurrentCursorWithWindow');
  late final _XTestCompareCurrentCursorWithWindow =
      _XTestCompareCurrentCursorWithWindowPtr.asFunction<
          int Function(ffi.Pointer<Display>, int)>();

  int XTestFakeKeyEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XTestFakeKeyEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XTestFakeKeyEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.UnsignedInt, ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeKeyEvent');
  late final _XTestFakeKeyEvent = _XTestFakeKeyEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XTestFakeButtonEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XTestFakeButtonEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XTestFakeButtonEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.UnsignedInt, ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeButtonEvent');
  late final _XTestFakeButtonEvent = _XTestFakeButtonEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int)>();

  int XTestFakeMotionEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _XTestFakeMotionEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _XTestFakeMotionEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Int, ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeMotionEvent');
  late final _XTestFakeMotionEvent = _XTestFakeMotionEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, int, int, int, int)>();

  int XTestFakeRelativeMotionEvent(
    ffi.Pointer<Display> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _XTestFakeRelativeMotionEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _XTestFakeRelativeMotionEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Display>, ffi.Int, ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeRelativeMotionEvent');
  late final _XTestFakeRelativeMotionEvent = _XTestFakeRelativeMotionEventPtr
      .asFunction<int Function(ffi.Pointer<Display>, int, int, int)>();

  int XTestFakeDeviceKeyEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    int arg5,
    int arg6,
  ) {
    return _XTestFakeDeviceKeyEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XTestFakeDeviceKeyEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeDeviceKeyEvent');
  late final _XTestFakeDeviceKeyEvent = _XTestFakeDeviceKeyEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
          ffi.Pointer<ffi.Int>, int, int)>();

  int XTestFakeDeviceButtonEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    int arg5,
    int arg6,
  ) {
    return _XTestFakeDeviceButtonEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XTestFakeDeviceButtonEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeDeviceButtonEvent');
  late final _XTestFakeDeviceButtonEvent =
      _XTestFakeDeviceButtonEventPtr.asFunction<
          int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
              ffi.Pointer<ffi.Int>, int, int)>();

  int XTestFakeProximityEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
    int arg4,
    int arg5,
  ) {
    return _XTestFakeProximityEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _XTestFakeProximityEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeProximityEvent');
  late final _XTestFakeProximityEvent = _XTestFakeProximityEventPtr.asFunction<
      int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int,
          ffi.Pointer<ffi.Int>, int, int)>();

  int XTestFakeDeviceMotionEvent(
    ffi.Pointer<Display> arg0,
    ffi.Pointer<XDevice> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int> arg4,
    int arg5,
    int arg6,
  ) {
    return _XTestFakeDeviceMotionEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _XTestFakeDeviceMotionEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Display>,
              ffi.Pointer<XDevice>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.UnsignedLong)>>('XTestFakeDeviceMotionEvent');
  late final _XTestFakeDeviceMotionEvent =
      _XTestFakeDeviceMotionEventPtr.asFunction<
          int Function(ffi.Pointer<Display>, ffi.Pointer<XDevice>, int, int,
              ffi.Pointer<ffi.Int>, int, int)>();

  int XTestGrabControl(
    ffi.Pointer<Display> arg0,
    int arg1,
  ) {
    return _XTestGrabControl(
      arg0,
      arg1,
    );
  }

  late final _XTestGrabControlPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>, ffi.Int)>>(
      'XTestGrabControl');
  late final _XTestGrabControl = _XTestGrabControlPtr.asFunction<
      int Function(ffi.Pointer<Display>, int)>();

  void XTestSetGContextOfGC(
    GC arg0,
    int arg1,
  ) {
    return _XTestSetGContextOfGC(
      arg0,
      arg1,
    );
  }

  late final _XTestSetGContextOfGCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GC, GContext)>>(
          'XTestSetGContextOfGC');
  late final _XTestSetGContextOfGC =
      _XTestSetGContextOfGCPtr.asFunction<void Function(GC, int)>();

  void XTestSetVisualIDOfVisual(
    ffi.Pointer<Visual> arg0,
    int arg1,
  ) {
    return _XTestSetVisualIDOfVisual(
      arg0,
      arg1,
    );
  }

  late final _XTestSetVisualIDOfVisualPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Visual>, VisualID)>>(
      'XTestSetVisualIDOfVisual');
  late final _XTestSetVisualIDOfVisual = _XTestSetVisualIDOfVisualPtr
      .asFunction<void Function(ffi.Pointer<Visual>, int)>();

  int XTestDiscard(
    ffi.Pointer<Display> arg0,
  ) {
    return _XTestDiscard(
      arg0,
    );
  }

  late final _XTestDiscardPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Display>)>>(
          'XTestDiscard');
  late final _XTestDiscard =
      _XTestDiscardPtr.asFunction<int Function(ffi.Pointer<Display>)>();
}

typedef __u_char = ffi.UnsignedChar;
typedef Dart__u_char = int;
typedef __u_short = ffi.UnsignedShort;
typedef Dart__u_short = int;
typedef __u_int = ffi.UnsignedInt;
typedef Dart__u_int = int;
typedef __u_long = ffi.UnsignedLong;
typedef Dart__u_long = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.Long;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;
typedef __int_least8_t = __int8_t;
typedef __uint_least8_t = __uint8_t;
typedef __int_least16_t = __int16_t;
typedef __uint_least16_t = __uint16_t;
typedef __int_least32_t = __int32_t;
typedef __uint_least32_t = __uint32_t;
typedef __int_least64_t = __int64_t;
typedef __uint_least64_t = __uint64_t;
typedef __quad_t = ffi.Long;
typedef Dart__quad_t = int;
typedef __u_quad_t = ffi.UnsignedLong;
typedef Dart__u_quad_t = int;
typedef __intmax_t = ffi.Long;
typedef Dart__intmax_t = int;
typedef __uintmax_t = ffi.UnsignedLong;
typedef Dart__uintmax_t = int;
typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __ino64_t = ffi.UnsignedLong;
typedef Dart__ino64_t = int;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef __nlink_t = ffi.UnsignedInt;
typedef Dart__nlink_t = int;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef __rlim_t = ffi.UnsignedLong;
typedef Dart__rlim_t = int;
typedef __rlim64_t = ffi.UnsignedLong;
typedef Dart__rlim64_t = int;
typedef __id_t = ffi.UnsignedInt;
typedef Dart__id_t = int;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;
typedef __suseconds64_t = ffi.Long;
typedef Dart__suseconds64_t = int;
typedef __daddr_t = ffi.Int;
typedef Dart__daddr_t = int;
typedef __key_t = ffi.Int;
typedef Dart__key_t = int;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef __timer_t = ffi.Pointer<ffi.Void>;
typedef __blksize_t = ffi.Int;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;
typedef __blkcnt64_t = ffi.Long;
typedef Dart__blkcnt64_t = int;
typedef __fsblkcnt_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt_t = int;
typedef __fsblkcnt64_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt64_t = int;
typedef __fsfilcnt_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt_t = int;
typedef __fsfilcnt64_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt64_t = int;
typedef __fsword_t = ffi.Long;
typedef Dart__fsword_t = int;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;
typedef __syscall_ulong_t = ffi.UnsignedLong;
typedef Dart__syscall_ulong_t = int;
typedef __loff_t = __off64_t;
typedef __caddr_t = ffi.Pointer<ffi.Char>;
typedef __intptr_t = ffi.Long;
typedef Dart__intptr_t = int;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;
typedef __sig_atomic_t = ffi.Int;
typedef Dart__sig_atomic_t = int;
typedef u_char = __u_char;
typedef u_short = __u_short;
typedef u_int = __u_int;
typedef u_long = __u_long;
typedef quad_t = __quad_t;
typedef u_quad_t = __u_quad_t;
typedef fsid_t = __fsid_t;
typedef loff_t = __loff_t;
typedef ino_t = __ino_t;
typedef dev_t = __dev_t;
typedef gid_t = __gid_t;
typedef mode_t = __mode_t;
typedef nlink_t = __nlink_t;
typedef uid_t = __uid_t;
typedef off_t = __off_t;
typedef pid_t = __pid_t;
typedef id_t = __id_t;
typedef ssize_t = __ssize_t;
typedef daddr_t = __daddr_t;
typedef caddr_t = __caddr_t;
typedef key_t = __key_t;
typedef clock_t = __clock_t;
typedef clockid_t = __clockid_t;
typedef time_t = __time_t;
typedef timer_t = __timer_t;
typedef ulong = ffi.UnsignedLong;
typedef Dartulong = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
typedef uint = ffi.UnsignedInt;
typedef Dartuint = int;
typedef u_int8_t = __uint8_t;
typedef u_int16_t = __uint16_t;
typedef u_int32_t = __uint32_t;
typedef u_int64_t = __uint64_t;
typedef register_t = ffi.Long;
typedef Dartregister_t = int;

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

typedef sigset_t = __sigset_t;

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef suseconds_t = __suseconds_t;
typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef fd_mask = __fd_mask;
typedef blksize_t = __blksize_t;
typedef blkcnt_t = __blkcnt_t;
typedef fsblkcnt_t = __fsblkcnt_t;
typedef fsfilcnt_t = __fsfilcnt_t;

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

typedef __pthread_slist_t = __pthread_internal_slist;

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Int()
  external int __spins;

  external __pthread_list_t __list;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.UnsignedLong()
  external int __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;

  @ffi.UnsignedInt()
  external int __unused_initialized_1;

  @ffi.UnsignedInt()
  external int __unused_initialized_2;
}

typedef __tss_t = ffi.UnsignedInt;
typedef Dart__tss_t = int;
typedef __thrd_t = ffi.UnsignedLong;
typedef Dart__thrd_t = int;

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

typedef XID = ffi.UnsignedLong;
typedef DartXID = int;
typedef Mask = ffi.UnsignedLong;
typedef DartMask = int;
typedef Atom = ffi.UnsignedLong;
typedef DartAtom = int;
typedef VisualID = ffi.UnsignedLong;
typedef DartVisualID = int;
typedef Time = ffi.UnsignedLong;
typedef DartTime = int;
typedef Window = XID;
typedef Drawable = XID;
typedef Font = XID;
typedef Pixmap = XID;
typedef Cursor = XID;
typedef Colormap = XID;
typedef GContext = XID;
typedef KeySym = XID;
typedef KeyCode = ffi.UnsignedChar;
typedef DartKeyCode = int;
typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;

final class max_align_t extends ffi.Opaque {}

typedef XPointer = ffi.Pointer<ffi.Char>;

final class _XExtData extends ffi.Struct {
  @ffi.Int()
  external int number;

  external ffi.Pointer<_XExtData> next;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<_XExtData> extension$)>>
      free_private;

  external XPointer private_data;
}

typedef XExtData = _XExtData;

final class XExtCodes extends ffi.Struct {
  @ffi.Int()
  external int extension$;

  @ffi.Int()
  external int major_opcode;

  @ffi.Int()
  external int first_event;

  @ffi.Int()
  external int first_error;
}

final class XPixmapFormatValues extends ffi.Struct {
  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int bits_per_pixel;

  @ffi.Int()
  external int scanline_pad;
}

final class XGCValues extends ffi.Struct {
  @ffi.Int()
  external int function;

  @ffi.UnsignedLong()
  external int plane_mask;

  @ffi.UnsignedLong()
  external int foreground;

  @ffi.UnsignedLong()
  external int background;

  @ffi.Int()
  external int line_width;

  @ffi.Int()
  external int line_style;

  @ffi.Int()
  external int cap_style;

  @ffi.Int()
  external int join_style;

  @ffi.Int()
  external int fill_style;

  @ffi.Int()
  external int fill_rule;

  @ffi.Int()
  external int arc_mode;

  @Pixmap()
  external int tile;

  @Pixmap()
  external int stipple;

  @ffi.Int()
  external int ts_x_origin;

  @ffi.Int()
  external int ts_y_origin;

  @Font()
  external int font;

  @ffi.Int()
  external int subwindow_mode;

  @ffi.Int()
  external int graphics_exposures;

  @ffi.Int()
  external int clip_x_origin;

  @ffi.Int()
  external int clip_y_origin;

  @Pixmap()
  external int clip_mask;

  @ffi.Int()
  external int dash_offset;

  @ffi.Char()
  external int dashes;
}

final class _XGC extends ffi.Opaque {}

typedef GC = ffi.Pointer<_XGC>;

final class Visual extends ffi.Struct {
  external ffi.Pointer<XExtData> ext_data;

  @VisualID()
  external int visualid;

  @ffi.Int()
  external int class$;

  @ffi.UnsignedLong()
  external int red_mask;

  @ffi.UnsignedLong()
  external int green_mask;

  @ffi.UnsignedLong()
  external int blue_mask;

  @ffi.Int()
  external int bits_per_rgb;

  @ffi.Int()
  external int map_entries;
}

final class Depth extends ffi.Struct {
  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int nvisuals;

  external ffi.Pointer<Visual> visuals;
}

final class _XDisplay extends ffi.Opaque {}

final class Screen extends ffi.Struct {
  external ffi.Pointer<XExtData> ext_data;

  external ffi.Pointer<_XDisplay> display;

  @Window()
  external int root;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int mwidth;

  @ffi.Int()
  external int mheight;

  @ffi.Int()
  external int ndepths;

  external ffi.Pointer<Depth> depths;

  @ffi.Int()
  external int root_depth;

  external ffi.Pointer<Visual> root_visual;

  external GC default_gc;

  @Colormap()
  external int cmap;

  @ffi.UnsignedLong()
  external int white_pixel;

  @ffi.UnsignedLong()
  external int black_pixel;

  @ffi.Int()
  external int max_maps;

  @ffi.Int()
  external int min_maps;

  @ffi.Int()
  external int backing_store;

  @ffi.Int()
  external int save_unders;

  @ffi.Long()
  external int root_input_mask;
}

final class ScreenFormat extends ffi.Struct {
  external ffi.Pointer<XExtData> ext_data;

  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int bits_per_pixel;

  @ffi.Int()
  external int scanline_pad;
}

final class XSetWindowAttributes extends ffi.Struct {
  @Pixmap()
  external int background_pixmap;

  @ffi.UnsignedLong()
  external int background_pixel;

  @Pixmap()
  external int border_pixmap;

  @ffi.UnsignedLong()
  external int border_pixel;

  @ffi.Int()
  external int bit_gravity;

  @ffi.Int()
  external int win_gravity;

  @ffi.Int()
  external int backing_store;

  @ffi.UnsignedLong()
  external int backing_planes;

  @ffi.UnsignedLong()
  external int backing_pixel;

  @ffi.Int()
  external int save_under;

  @ffi.Long()
  external int event_mask;

  @ffi.Long()
  external int do_not_propagate_mask;

  @ffi.Int()
  external int override_redirect;

  @Colormap()
  external int colormap;

  @Cursor()
  external int cursor;
}

final class XWindowAttributes extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int border_width;

  @ffi.Int()
  external int depth;

  external ffi.Pointer<Visual> visual;

  @Window()
  external int root;

  @ffi.Int()
  external int class$;

  @ffi.Int()
  external int bit_gravity;

  @ffi.Int()
  external int win_gravity;

  @ffi.Int()
  external int backing_store;

  @ffi.UnsignedLong()
  external int backing_planes;

  @ffi.UnsignedLong()
  external int backing_pixel;

  @ffi.Int()
  external int save_under;

  @Colormap()
  external int colormap;

  @ffi.Int()
  external int map_installed;

  @ffi.Int()
  external int map_state;

  @ffi.Long()
  external int all_event_masks;

  @ffi.Long()
  external int your_event_mask;

  @ffi.Long()
  external int do_not_propagate_mask;

  @ffi.Int()
  external int override_redirect;

  external ffi.Pointer<Screen> screen;
}

final class XHostAddress extends ffi.Struct {
  @ffi.Int()
  external int family;

  @ffi.Int()
  external int length;

  external ffi.Pointer<ffi.Char> address;
}

final class XServerInterpretedAddress extends ffi.Struct {
  @ffi.Int()
  external int typelength;

  @ffi.Int()
  external int valuelength;

  external ffi.Pointer<ffi.Char> type;

  external ffi.Pointer<ffi.Char> value;
}

final class funcs extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<_XImage> Function(
              ffi.Pointer<_XDisplay>,
              ffi.Pointer<Visual>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>> create_image;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_XImage>)>>
      destroy_image;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<_XImage>, ffi.Int, ffi.Int)>> get_pixel;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<_XImage>, ffi.Int, ffi.Int, ffi.UnsignedLong)>>
      put_pixel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<_XImage> Function(ffi.Pointer<_XImage>, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>> sub_image;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_XImage>, ffi.Long)>>
      add_pixel;
}

final class _XImage extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int xoffset;

  @ffi.Int()
  external int format;

  external ffi.Pointer<ffi.Char> data;

  @ffi.Int()
  external int byte_order;

  @ffi.Int()
  external int bitmap_unit;

  @ffi.Int()
  external int bitmap_bit_order;

  @ffi.Int()
  external int bitmap_pad;

  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int bytes_per_line;

  @ffi.Int()
  external int bits_per_pixel;

  @ffi.UnsignedLong()
  external int red_mask;

  @ffi.UnsignedLong()
  external int green_mask;

  @ffi.UnsignedLong()
  external int blue_mask;

  external XPointer obdata;

  external funcs f;
}

typedef XImage = _XImage;

final class XWindowChanges extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int border_width;

  @Window()
  external int sibling;

  @ffi.Int()
  external int stack_mode;
}

final class XColor extends ffi.Struct {
  @ffi.UnsignedLong()
  external int pixel;

  @ffi.UnsignedShort()
  external int red;

  @ffi.UnsignedShort()
  external int green;

  @ffi.UnsignedShort()
  external int blue;

  @ffi.Char()
  external int flags;

  @ffi.Char()
  external int pad;
}

final class XSegment extends ffi.Struct {
  @ffi.Short()
  external int x1;

  @ffi.Short()
  external int y1;

  @ffi.Short()
  external int x2;

  @ffi.Short()
  external int y2;
}

final class XPoint extends ffi.Struct {
  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;
}

final class XRectangle extends ffi.Struct {
  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;

  @ffi.UnsignedShort()
  external int width;

  @ffi.UnsignedShort()
  external int height;
}

final class XArc extends ffi.Struct {
  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;

  @ffi.UnsignedShort()
  external int width;

  @ffi.UnsignedShort()
  external int height;

  @ffi.Short()
  external int angle1;

  @ffi.Short()
  external int angle2;
}

final class XKeyboardControl extends ffi.Struct {
  @ffi.Int()
  external int key_click_percent;

  @ffi.Int()
  external int bell_percent;

  @ffi.Int()
  external int bell_pitch;

  @ffi.Int()
  external int bell_duration;

  @ffi.Int()
  external int led;

  @ffi.Int()
  external int led_mode;

  @ffi.Int()
  external int key;

  @ffi.Int()
  external int auto_repeat_mode;
}

final class XKeyboardState extends ffi.Struct {
  @ffi.Int()
  external int key_click_percent;

  @ffi.Int()
  external int bell_percent;

  @ffi.UnsignedInt()
  external int bell_pitch;

  @ffi.UnsignedInt()
  external int bell_duration;

  @ffi.UnsignedLong()
  external int led_mask;

  @ffi.Int()
  external int global_auto_repeat;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> auto_repeats;
}

final class XTimeCoord extends ffi.Struct {
  @Time()
  external int time;

  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;
}

final class XModifierKeymap extends ffi.Struct {
  @ffi.Int()
  external int max_keypermod;

  external ffi.Pointer<KeyCode> modifiermap;
}

typedef Display = _XDisplay;

final class _XPrivate extends ffi.Opaque {}

final class _XrmHashBucketRec extends ffi.Opaque {}

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<XExtData> ext_data;

  external ffi.Pointer<_XPrivate> private1;

  @ffi.Int()
  external int fd;

  @ffi.Int()
  external int private2;

  @ffi.Int()
  external int proto_major_version;

  @ffi.Int()
  external int proto_minor_version;

  external ffi.Pointer<ffi.Char> vendor;

  @XID()
  external int private3;

  @XID()
  external int private4;

  @XID()
  external int private5;

  @ffi.Int()
  external int private6;

  external ffi.Pointer<ffi.NativeFunction<XID Function(ffi.Pointer<_XDisplay>)>>
      resource_alloc;

  @ffi.Int()
  external int byte_order;

  @ffi.Int()
  external int bitmap_unit;

  @ffi.Int()
  external int bitmap_pad;

  @ffi.Int()
  external int bitmap_bit_order;

  @ffi.Int()
  external int nformats;

  external ffi.Pointer<ScreenFormat> pixmap_format;

  @ffi.Int()
  external int private8;

  @ffi.Int()
  external int release;

  external ffi.Pointer<_XPrivate> private9;

  external ffi.Pointer<_XPrivate> private10;

  @ffi.Int()
  external int qlen;

  @ffi.UnsignedLong()
  external int last_request_read;

  @ffi.UnsignedLong()
  external int request;

  external XPointer private11;

  external XPointer private12;

  external XPointer private13;

  external XPointer private14;

  @ffi.UnsignedInt()
  external int max_request_size;

  external ffi.Pointer<_XrmHashBucketRec> db;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_XDisplay>)>>
      private15;

  external ffi.Pointer<ffi.Char> display_name;

  @ffi.Int()
  external int default_screen;

  @ffi.Int()
  external int nscreens;

  external ffi.Pointer<Screen> screens;

  @ffi.UnsignedLong()
  external int motion_buffer;

  @ffi.UnsignedLong()
  external int private16;

  @ffi.Int()
  external int min_keycode;

  @ffi.Int()
  external int max_keycode;

  external XPointer private17;

  external XPointer private18;

  @ffi.Int()
  external int private19;

  external ffi.Pointer<ffi.Char> xdefaults;
}

typedef _XPrivDisplay = ffi.Pointer<UnnamedStruct2>;

final class XKeyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.UnsignedInt()
  external int keycode;

  @ffi.Int()
  external int same_screen;
}

typedef XKeyPressedEvent = XKeyEvent;
typedef XKeyReleasedEvent = XKeyEvent;

final class XButtonEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.UnsignedInt()
  external int button;

  @ffi.Int()
  external int same_screen;
}

typedef XButtonPressedEvent = XButtonEvent;
typedef XButtonReleasedEvent = XButtonEvent;

final class XMotionEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.Char()
  external int is_hint;

  @ffi.Int()
  external int same_screen;
}

typedef XPointerMovedEvent = XMotionEvent;

final class XCrossingEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.Int()
  external int mode;

  @ffi.Int()
  external int detail;

  @ffi.Int()
  external int same_screen;

  @ffi.Int()
  external int focus;

  @ffi.UnsignedInt()
  external int state;
}

typedef XEnterWindowEvent = XCrossingEvent;
typedef XLeaveWindowEvent = XCrossingEvent;

final class XFocusChangeEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Int()
  external int mode;

  @ffi.Int()
  external int detail;
}

typedef XFocusInEvent = XFocusChangeEvent;
typedef XFocusOutEvent = XFocusChangeEvent;

final class XKeymapEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> key_vector;
}

final class XExposeEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int count;
}

final class XGraphicsExposeEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Drawable()
  external int drawable;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int count;

  @ffi.Int()
  external int major_code;

  @ffi.Int()
  external int minor_code;
}

final class XNoExposeEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Drawable()
  external int drawable;

  @ffi.Int()
  external int major_code;

  @ffi.Int()
  external int minor_code;
}

final class XVisibilityEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Int()
  external int state;
}

final class XCreateWindowEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int parent;

  @Window()
  external int window;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int border_width;

  @ffi.Int()
  external int override_redirect;
}

final class XDestroyWindowEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;
}

final class XUnmapEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @ffi.Int()
  external int from_configure;
}

final class XMapEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @ffi.Int()
  external int override_redirect;
}

final class XMapRequestEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int parent;

  @Window()
  external int window;
}

final class XReparentEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @Window()
  external int parent;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int override_redirect;
}

final class XConfigureEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int border_width;

  @Window()
  external int above;

  @ffi.Int()
  external int override_redirect;
}

final class XGravityEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

final class XResizeRequestEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class XConfigureRequestEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int parent;

  @Window()
  external int window;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int border_width;

  @Window()
  external int above;

  @ffi.Int()
  external int detail;

  @ffi.UnsignedLong()
  external int value_mask;
}

final class XCirculateEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int event;

  @Window()
  external int window;

  @ffi.Int()
  external int place;
}

final class XCirculateRequestEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int parent;

  @Window()
  external int window;

  @ffi.Int()
  external int place;
}

final class XPropertyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Atom()
  external int atom;

  @Time()
  external int time;

  @ffi.Int()
  external int state;
}

final class XSelectionClearEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Atom()
  external int selection;

  @Time()
  external int time;
}

final class XSelectionRequestEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int owner;

  @Window()
  external int requestor;

  @Atom()
  external int selection;

  @Atom()
  external int target;

  @Atom()
  external int property;

  @Time()
  external int time;
}

final class XSelectionEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int requestor;

  @Atom()
  external int selection;

  @Atom()
  external int target;

  @Atom()
  external int property;

  @Time()
  external int time;
}

final class XColormapEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Colormap()
  external int colormap;

  @ffi.Int()
  external int new$;

  @ffi.Int()
  external int state;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> b;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Short> s;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Long> l;
}

final class XClientMessageEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Atom()
  external int message_type;

  @ffi.Int()
  external int format;

  external UnnamedUnion1 data;
}

final class XMappingEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @ffi.Int()
  external int request;

  @ffi.Int()
  external int first_keycode;

  @ffi.Int()
  external int count;
}

final class XErrorEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<Display> display;

  @XID()
  external int resourceid;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.UnsignedChar()
  external int error_code;

  @ffi.UnsignedChar()
  external int request_code;

  @ffi.UnsignedChar()
  external int minor_code;
}

final class XAnyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;
}

final class XGenericEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @ffi.Int()
  external int extension$;

  @ffi.Int()
  external int evtype;
}

final class XGenericEventCookie extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @ffi.Int()
  external int extension$;

  @ffi.Int()
  external int evtype;

  @ffi.UnsignedInt()
  external int cookie;

  external ffi.Pointer<ffi.Void> data;
}

final class _XEvent extends ffi.Union {
  @ffi.Int()
  external int type;

  external XAnyEvent xany;

  external XKeyEvent xkey;

  external XButtonEvent xbutton;

  external XMotionEvent xmotion;

  external XCrossingEvent xcrossing;

  external XFocusChangeEvent xfocus;

  external XExposeEvent xexpose;

  external XGraphicsExposeEvent xgraphicsexpose;

  external XNoExposeEvent xnoexpose;

  external XVisibilityEvent xvisibility;

  external XCreateWindowEvent xcreatewindow;

  external XDestroyWindowEvent xdestroywindow;

  external XUnmapEvent xunmap;

  external XMapEvent xmap;

  external XMapRequestEvent xmaprequest;

  external XReparentEvent xreparent;

  external XConfigureEvent xconfigure;

  external XGravityEvent xgravity;

  external XResizeRequestEvent xresizerequest;

  external XConfigureRequestEvent xconfigurerequest;

  external XCirculateEvent xcirculate;

  external XCirculateRequestEvent xcirculaterequest;

  external XPropertyEvent xproperty;

  external XSelectionClearEvent xselectionclear;

  external XSelectionRequestEvent xselectionrequest;

  external XSelectionEvent xselection;

  external XColormapEvent xcolormap;

  external XClientMessageEvent xclient;

  external XMappingEvent xmapping;

  external XErrorEvent xerror;

  external XKeymapEvent xkeymap;

  external XGenericEvent xgeneric;

  external XGenericEventCookie xcookie;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.Long> pad;
}

typedef XEvent = _XEvent;

final class XCharStruct extends ffi.Struct {
  @ffi.Short()
  external int lbearing;

  @ffi.Short()
  external int rbearing;

  @ffi.Short()
  external int width;

  @ffi.Short()
  external int ascent;

  @ffi.Short()
  external int descent;

  @ffi.UnsignedShort()
  external int attributes;
}

final class XFontProp extends ffi.Struct {
  @Atom()
  external int name;

  @ffi.UnsignedLong()
  external int card32;
}

final class XFontStruct extends ffi.Struct {
  external ffi.Pointer<XExtData> ext_data;

  @Font()
  external int fid;

  @ffi.UnsignedInt()
  external int direction;

  @ffi.UnsignedInt()
  external int min_char_or_byte2;

  @ffi.UnsignedInt()
  external int max_char_or_byte2;

  @ffi.UnsignedInt()
  external int min_byte1;

  @ffi.UnsignedInt()
  external int max_byte1;

  @ffi.Int()
  external int all_chars_exist;

  @ffi.UnsignedInt()
  external int default_char;

  @ffi.Int()
  external int n_properties;

  external ffi.Pointer<XFontProp> properties;

  external XCharStruct min_bounds;

  external XCharStruct max_bounds;

  external ffi.Pointer<XCharStruct> per_char;

  @ffi.Int()
  external int ascent;

  @ffi.Int()
  external int descent;
}

final class XTextItem extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chars;

  @ffi.Int()
  external int nchars;

  @ffi.Int()
  external int delta;

  @Font()
  external int font;
}

final class XChar2b extends ffi.Struct {
  @ffi.UnsignedChar()
  external int byte1;

  @ffi.UnsignedChar()
  external int byte2;
}

final class XTextItem16 extends ffi.Struct {
  external ffi.Pointer<XChar2b> chars;

  @ffi.Int()
  external int nchars;

  @ffi.Int()
  external int delta;

  @Font()
  external int font;
}

final class XEDataObject extends ffi.Union {
  external ffi.Pointer<Display> display;

  external GC gc;

  external ffi.Pointer<Visual> visual;

  external ffi.Pointer<Screen> screen;

  external ffi.Pointer<ScreenFormat> pixmap_format;

  external ffi.Pointer<XFontStruct> font;
}

final class XFontSetExtents extends ffi.Struct {
  external XRectangle max_ink_extent;

  external XRectangle max_logical_extent;
}

final class _XOM extends ffi.Opaque {}

typedef XOM = ffi.Pointer<_XOM>;

final class _XOC extends ffi.Opaque {}

typedef XOC = ffi.Pointer<_XOC>;
typedef XFontSet = ffi.Pointer<_XOC>;

final class XmbTextItem extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chars;

  @ffi.Int()
  external int nchars;

  @ffi.Int()
  external int delta;

  external XFontSet font_set;
}

final class XwcTextItem extends ffi.Struct {
  external ffi.Pointer<ffi.WChar> chars;

  @ffi.Int()
  external int nchars;

  @ffi.Int()
  external int delta;

  external XFontSet font_set;
}

final class XOMCharSetList extends ffi.Struct {
  @ffi.Int()
  external int charset_count;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> charset_list;
}

enum XOrientation {
  XOMOrientation_LTR_TTB(0),
  XOMOrientation_RTL_TTB(1),
  XOMOrientation_TTB_LTR(2),
  XOMOrientation_TTB_RTL(3),
  XOMOrientation_Context(4);

  final int value;
  const XOrientation(this.value);

  static XOrientation fromValue(int value) => switch (value) {
        0 => XOMOrientation_LTR_TTB,
        1 => XOMOrientation_RTL_TTB,
        2 => XOMOrientation_TTB_LTR,
        3 => XOMOrientation_TTB_RTL,
        4 => XOMOrientation_Context,
        _ => throw ArgumentError('Unknown value for XOrientation: $value'),
      };
}

final class XOMOrientation extends ffi.Struct {
  @ffi.Int()
  external int num_orientation;

  external ffi.Pointer<ffi.UnsignedInt> orientation;
}

final class XOMFontInfo extends ffi.Struct {
  @ffi.Int()
  external int num_font;

  external ffi.Pointer<ffi.Pointer<XFontStruct>> font_struct_list;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> font_name_list;
}

final class _XIM extends ffi.Opaque {}

typedef XIM = ffi.Pointer<_XIM>;

final class _XIC extends ffi.Opaque {}

typedef XIC = ffi.Pointer<_XIC>;
typedef XIMProcFunction = ffi.Void Function(XIM, XPointer, XPointer);
typedef DartXIMProcFunction = void Function(XIM, XPointer, XPointer);
typedef XIMProc = ffi.Pointer<ffi.NativeFunction<XIMProcFunction>>;
typedef XICProcFunction = ffi.Int Function(XIC, XPointer, XPointer);
typedef DartXICProcFunction = int Function(XIC, XPointer, XPointer);
typedef XICProc = ffi.Pointer<ffi.NativeFunction<XICProcFunction>>;
typedef XIDProcFunction = ffi.Void Function(
    ffi.Pointer<Display>, XPointer, XPointer);
typedef DartXIDProcFunction = void Function(
    ffi.Pointer<Display>, XPointer, XPointer);
typedef XIDProc = ffi.Pointer<ffi.NativeFunction<XIDProcFunction>>;
typedef XIMStyle = ffi.UnsignedLong;
typedef DartXIMStyle = int;

final class XIMStyles extends ffi.Struct {
  @ffi.UnsignedShort()
  external int count_styles;

  external ffi.Pointer<XIMStyle> supported_styles;
}

typedef XVaNestedList = ffi.Pointer<ffi.Void>;

final class XIMCallback extends ffi.Struct {
  external XPointer client_data;

  external XIMProc callback;
}

final class XICCallback extends ffi.Struct {
  external XPointer client_data;

  external XICProc callback;
}

typedef XIMFeedback = ffi.UnsignedLong;
typedef DartXIMFeedback = int;

final class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<ffi.Char> multi_byte;

  external ffi.Pointer<ffi.WChar> wide_char;
}

final class _XIMText extends ffi.Struct {
  @ffi.UnsignedShort()
  external int length;

  external ffi.Pointer<XIMFeedback> feedback;

  @ffi.Int()
  external int encoding_is_wchar;

  external UnnamedUnion2 string;
}

typedef XIMText = _XIMText;
typedef XIMPreeditState = ffi.UnsignedLong;
typedef DartXIMPreeditState = int;

final class _XIMPreeditStateNotifyCallbackStruct extends ffi.Struct {
  @XIMPreeditState()
  external int state;
}

typedef XIMPreeditStateNotifyCallbackStruct
    = _XIMPreeditStateNotifyCallbackStruct;
typedef XIMResetState = ffi.UnsignedLong;
typedef DartXIMResetState = int;
typedef XIMStringConversionFeedback = ffi.UnsignedLong;
typedef DartXIMStringConversionFeedback = int;

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<ffi.Char> mbs;

  external ffi.Pointer<ffi.WChar> wcs;
}

final class _XIMStringConversionText extends ffi.Struct {
  @ffi.UnsignedShort()
  external int length;

  external ffi.Pointer<XIMStringConversionFeedback> feedback;

  @ffi.Int()
  external int encoding_is_wchar;

  external UnnamedUnion3 string;
}

typedef XIMStringConversionText = _XIMStringConversionText;
typedef XIMStringConversionPosition = ffi.UnsignedShort;
typedef DartXIMStringConversionPosition = int;
typedef XIMStringConversionType = ffi.UnsignedShort;
typedef DartXIMStringConversionType = int;
typedef XIMStringConversionOperation = ffi.UnsignedShort;
typedef DartXIMStringConversionOperation = int;

enum XIMCaretDirection {
  XIMForwardChar(0),
  XIMBackwardChar(1),
  XIMForwardWord(2),
  XIMBackwardWord(3),
  XIMCaretUp(4),
  XIMCaretDown(5),
  XIMNextLine(6),
  XIMPreviousLine(7),
  XIMLineStart(8),
  XIMLineEnd(9),
  XIMAbsolutePosition(10),
  XIMDontChange(11);

  final int value;
  const XIMCaretDirection(this.value);

  static XIMCaretDirection fromValue(int value) => switch (value) {
        0 => XIMForwardChar,
        1 => XIMBackwardChar,
        2 => XIMForwardWord,
        3 => XIMBackwardWord,
        4 => XIMCaretUp,
        5 => XIMCaretDown,
        6 => XIMNextLine,
        7 => XIMPreviousLine,
        8 => XIMLineStart,
        9 => XIMLineEnd,
        10 => XIMAbsolutePosition,
        11 => XIMDontChange,
        _ => throw ArgumentError('Unknown value for XIMCaretDirection: $value'),
      };
}

final class _XIMStringConversionCallbackStruct extends ffi.Struct {
  @XIMStringConversionPosition()
  external int position;

  @ffi.UnsignedInt()
  external int directionAsInt;

  XIMCaretDirection get direction =>
      XIMCaretDirection.fromValue(directionAsInt);

  @XIMStringConversionOperation()
  external int operation;

  @ffi.UnsignedShort()
  external int factor;

  external ffi.Pointer<XIMStringConversionText> text;
}

typedef XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;

final class _XIMPreeditDrawCallbackStruct extends ffi.Struct {
  @ffi.Int()
  external int caret;

  @ffi.Int()
  external int chg_first;

  @ffi.Int()
  external int chg_length;

  external ffi.Pointer<XIMText> text;
}

typedef XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;

enum XIMCaretStyle {
  XIMIsInvisible(0),
  XIMIsPrimary(1),
  XIMIsSecondary(2);

  final int value;
  const XIMCaretStyle(this.value);

  static XIMCaretStyle fromValue(int value) => switch (value) {
        0 => XIMIsInvisible,
        1 => XIMIsPrimary,
        2 => XIMIsSecondary,
        _ => throw ArgumentError('Unknown value for XIMCaretStyle: $value'),
      };
}

final class _XIMPreeditCaretCallbackStruct extends ffi.Struct {
  @ffi.Int()
  external int position;

  @ffi.UnsignedInt()
  external int directionAsInt;

  XIMCaretDirection get direction =>
      XIMCaretDirection.fromValue(directionAsInt);

  @ffi.UnsignedInt()
  external int styleAsInt;

  XIMCaretStyle get style => XIMCaretStyle.fromValue(styleAsInt);
}

typedef XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;

enum XIMStatusDataType {
  XIMTextType(0),
  XIMBitmapType(1);

  final int value;
  const XIMStatusDataType(this.value);

  static XIMStatusDataType fromValue(int value) => switch (value) {
        0 => XIMTextType,
        1 => XIMBitmapType,
        _ => throw ArgumentError('Unknown value for XIMStatusDataType: $value'),
      };
}

final class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<XIMText> text;

  @Pixmap()
  external int bitmap;
}

final class _XIMStatusDrawCallbackStruct extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  XIMStatusDataType get type => XIMStatusDataType.fromValue(typeAsInt);

  external UnnamedUnion4 data;
}

typedef XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;

final class _XIMHotKeyTrigger extends ffi.Struct {
  @KeySym()
  external int keysym;

  @ffi.Int()
  external int modifier;

  @ffi.Int()
  external int modifier_mask;
}

typedef XIMHotKeyTrigger = _XIMHotKeyTrigger;

final class _XIMHotKeyTriggers extends ffi.Struct {
  @ffi.Int()
  external int num_hot_key;

  external ffi.Pointer<XIMHotKeyTrigger> key;
}

typedef XIMHotKeyTriggers = _XIMHotKeyTriggers;
typedef XIMHotKeyState = ffi.UnsignedLong;
typedef DartXIMHotKeyState = int;

final class XIMValuesList extends ffi.Struct {
  @ffi.UnsignedShort()
  external int count_values;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> supported_values;
}

typedef XErrorHandlerFunction = ffi.Int Function(
    ffi.Pointer<Display>, ffi.Pointer<XErrorEvent>);
typedef DartXErrorHandlerFunction = int Function(
    ffi.Pointer<Display>, ffi.Pointer<XErrorEvent>);
typedef XErrorHandler = ffi.Pointer<ffi.NativeFunction<XErrorHandlerFunction>>;
typedef XIOErrorHandlerFunction = ffi.Int Function(ffi.Pointer<Display>);
typedef DartXIOErrorHandlerFunction = int Function(ffi.Pointer<Display>);
typedef XIOErrorHandler
    = ffi.Pointer<ffi.NativeFunction<XIOErrorHandlerFunction>>;
typedef XIOErrorExitHandlerFunction = ffi.Void Function(
    ffi.Pointer<Display>, ffi.Pointer<ffi.Void>);
typedef DartXIOErrorExitHandlerFunction = void Function(
    ffi.Pointer<Display>, ffi.Pointer<ffi.Void>);
typedef XIOErrorExitHandler
    = ffi.Pointer<ffi.NativeFunction<XIOErrorExitHandlerFunction>>;
typedef XConnectionWatchProcFunction = ffi.Void Function(
    ffi.Pointer<Display>, XPointer, ffi.Int, ffi.Int, ffi.Pointer<XPointer>);
typedef DartXConnectionWatchProcFunction = void Function(
    ffi.Pointer<Display>, XPointer, int, int, ffi.Pointer<XPointer>);
typedef XConnectionWatchProc
    = ffi.Pointer<ffi.NativeFunction<XConnectionWatchProcFunction>>;
typedef XEventClass = ffi.UnsignedLong;
typedef DartXEventClass = int;

final class XExtensionVersion extends ffi.Struct {
  @ffi.Int()
  external int present;

  @ffi.Short()
  external int major_version;

  @ffi.Short()
  external int minor_version;
}

final class _XAnyClassinfo extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;
}

typedef XAnyClassPtr = ffi.Pointer<_XAnyClassinfo>;

final class XDeviceKeyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.UnsignedInt()
  external int keycode;

  @ffi.Int()
  external int same_screen;

  @ffi.UnsignedInt()
  external int device_state;

  @ffi.UnsignedChar()
  external int axes_count;

  @ffi.UnsignedChar()
  external int first_axis;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> axis_data;
}

typedef XDeviceKeyPressedEvent = XDeviceKeyEvent;
typedef XDeviceKeyReleasedEvent = XDeviceKeyEvent;

final class XDeviceButtonEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.UnsignedInt()
  external int button;

  @ffi.Int()
  external int same_screen;

  @ffi.UnsignedInt()
  external int device_state;

  @ffi.UnsignedChar()
  external int axes_count;

  @ffi.UnsignedChar()
  external int first_axis;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> axis_data;
}

typedef XDeviceButtonPressedEvent = XDeviceButtonEvent;
typedef XDeviceButtonReleasedEvent = XDeviceButtonEvent;

final class XDeviceMotionEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.Char()
  external int is_hint;

  @ffi.Int()
  external int same_screen;

  @ffi.UnsignedInt()
  external int device_state;

  @ffi.UnsignedChar()
  external int axes_count;

  @ffi.UnsignedChar()
  external int first_axis;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> axis_data;
}

final class XDeviceFocusChangeEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @ffi.Int()
  external int mode;

  @ffi.Int()
  external int detail;

  @Time()
  external int time;
}

typedef XDeviceFocusInEvent = XDeviceFocusChangeEvent;
typedef XDeviceFocusOutEvent = XDeviceFocusChangeEvent;

final class XProximityNotifyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Window()
  external int root;

  @Window()
  external int subwindow;

  @Time()
  external int time;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x_root;

  @ffi.Int()
  external int y_root;

  @ffi.UnsignedInt()
  external int state;

  @ffi.Int()
  external int same_screen;

  @ffi.UnsignedInt()
  external int device_state;

  @ffi.UnsignedChar()
  external int axes_count;

  @ffi.UnsignedChar()
  external int first_axis;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> axis_data;
}

typedef XProximityInEvent = XProximityNotifyEvent;
typedef XProximityOutEvent = XProximityNotifyEvent;

final class XInputClass extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;
}

final class XDeviceStateNotifyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Time()
  external int time;

  @ffi.Int()
  external int num_classes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> data;
}

final class XValuatorStatus extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.UnsignedChar()
  external int num_valuators;

  @ffi.UnsignedChar()
  external int mode;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> valuators;
}

final class XKeyStatus extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.Short()
  external int num_keys;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> keys;
}

final class XButtonStatus extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.Short()
  external int num_buttons;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> buttons;
}

final class XDeviceMappingEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Time()
  external int time;

  @ffi.Int()
  external int request;

  @ffi.Int()
  external int first_keycode;

  @ffi.Int()
  external int count;
}

final class XChangeDeviceNotifyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @XID()
  external int deviceid;

  @Time()
  external int time;

  @ffi.Int()
  external int request;
}

final class XDevicePresenceNotifyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Time()
  external int time;

  @ffi.Int()
  external int devchange;

  @XID()
  external int deviceid;

  @XID()
  external int control;
}

final class XDevicePropertyNotifyEvent extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.UnsignedLong()
  external int serial;

  @ffi.Int()
  external int send_event;

  external ffi.Pointer<Display> display;

  @Window()
  external int window;

  @Time()
  external int time;

  @XID()
  external int deviceid;

  @Atom()
  external int atom;

  @ffi.Int()
  external int state;
}

final class XFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;
}

final class XKbdFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int click;

  @ffi.Int()
  external int percent;

  @ffi.Int()
  external int pitch;

  @ffi.Int()
  external int duration;

  @ffi.Int()
  external int led_mask;

  @ffi.Int()
  external int global_auto_repeat;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> auto_repeats;
}

final class XPtrFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int accelNum;

  @ffi.Int()
  external int accelDenom;

  @ffi.Int()
  external int threshold;
}

final class XIntegerFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int resolution;

  @ffi.Int()
  external int minVal;

  @ffi.Int()
  external int maxVal;
}

final class XStringFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int max_symbols;

  @ffi.Int()
  external int num_syms_supported;

  external ffi.Pointer<KeySym> syms_supported;
}

final class XBellFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int percent;

  @ffi.Int()
  external int pitch;

  @ffi.Int()
  external int duration;
}

final class XLedFeedbackState extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int led_values;

  @ffi.Int()
  external int led_mask;
}

final class XFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;
}

final class XPtrFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int accelNum;

  @ffi.Int()
  external int accelDenom;

  @ffi.Int()
  external int threshold;
}

final class XKbdFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int click;

  @ffi.Int()
  external int percent;

  @ffi.Int()
  external int pitch;

  @ffi.Int()
  external int duration;

  @ffi.Int()
  external int led_mask;

  @ffi.Int()
  external int led_value;

  @ffi.Int()
  external int key;

  @ffi.Int()
  external int auto_repeat_mode;
}

final class XStringFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int num_keysyms;

  external ffi.Pointer<KeySym> syms_to_display;
}

final class XIntegerFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int int_to_display;
}

final class XBellFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int percent;

  @ffi.Int()
  external int pitch;

  @ffi.Int()
  external int duration;
}

final class XLedFeedbackControl extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @XID()
  external int id;

  @ffi.Int()
  external int led_mask;

  @ffi.Int()
  external int led_values;
}

final class XDeviceControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;
}

final class XDeviceResolutionControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int first_valuator;

  @ffi.Int()
  external int num_valuators;

  external ffi.Pointer<ffi.Int> resolutions;
}

final class XDeviceResolutionState extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int num_valuators;

  external ffi.Pointer<ffi.Int> resolutions;

  external ffi.Pointer<ffi.Int> min_resolutions;

  external ffi.Pointer<ffi.Int> max_resolutions;
}

final class XDeviceAbsCalibControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int min_x;

  @ffi.Int()
  external int max_x;

  @ffi.Int()
  external int min_y;

  @ffi.Int()
  external int max_y;

  @ffi.Int()
  external int flip_x;

  @ffi.Int()
  external int flip_y;

  @ffi.Int()
  external int rotation;

  @ffi.Int()
  external int button_threshold;
}

typedef XDeviceAbsCalibState = XDeviceAbsCalibControl;

final class XDeviceAbsAreaControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int offset_x;

  @ffi.Int()
  external int offset_y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int screen;

  @XID()
  external int following;
}

typedef XDeviceAbsAreaState = XDeviceAbsAreaControl;

final class XDeviceCoreControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int status;
}

final class XDeviceCoreState extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int status;

  @ffi.Int()
  external int iscore;
}

final class XDeviceEnableControl extends ffi.Struct {
  @XID()
  external int control;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int enable;
}

typedef XDeviceEnableState = XDeviceEnableControl;
typedef XAnyClassInfo = _XAnyClassinfo;

final class _XDeviceInfo extends ffi.Struct {
  @XID()
  external int id;

  @Atom()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int num_classes;

  @ffi.Int()
  external int use;

  external XAnyClassPtr inputclassinfo;
}

typedef XDeviceInfoPtr = ffi.Pointer<_XDeviceInfo>;
typedef XDeviceInfo = _XDeviceInfo;

final class _XKeyInfo extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @ffi.UnsignedShort()
  external int min_keycode;

  @ffi.UnsignedShort()
  external int max_keycode;

  @ffi.UnsignedShort()
  external int num_keys;
}

typedef XKeyInfoPtr = ffi.Pointer<_XKeyInfo>;
typedef XKeyInfo = _XKeyInfo;

final class _XButtonInfo extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @ffi.Short()
  external int num_buttons;
}

typedef XButtonInfoPtr = ffi.Pointer<_XButtonInfo>;
typedef XButtonInfo = _XButtonInfo;

final class _XAxisInfo extends ffi.Struct {
  @ffi.Int()
  external int resolution;

  @ffi.Int()
  external int min_value;

  @ffi.Int()
  external int max_value;
}

typedef XAxisInfoPtr = ffi.Pointer<_XAxisInfo>;
typedef XAxisInfo = _XAxisInfo;

final class _XValuatorInfo extends ffi.Struct {
  @XID()
  external int class$;

  @ffi.Int()
  external int length;

  @ffi.UnsignedChar()
  external int num_axes;

  @ffi.UnsignedChar()
  external int mode;

  @ffi.UnsignedLong()
  external int motion_buffer;

  external XAxisInfoPtr axes;
}

typedef XValuatorInfoPtr = ffi.Pointer<_XValuatorInfo>;
typedef XValuatorInfo = _XValuatorInfo;

final class XInputClassInfo extends ffi.Struct {
  @ffi.UnsignedChar()
  external int input_class;

  @ffi.UnsignedChar()
  external int event_type_base;
}

final class XDevice extends ffi.Struct {
  @XID()
  external int device_id;

  @ffi.Int()
  external int num_classes;

  external ffi.Pointer<XInputClassInfo> classes;
}

final class XEventList extends ffi.Struct {
  @XEventClass()
  external int event_type;

  @XID()
  external int device;
}

final class XDeviceTimeCoord extends ffi.Struct {
  @Time()
  external int time;

  external ffi.Pointer<ffi.Int> data;
}

final class XDeviceState extends ffi.Struct {
  @XID()
  external int device_id;

  @ffi.Int()
  external int num_classes;

  external ffi.Pointer<XInputClass> data;
}

final class XValuatorState extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.UnsignedChar()
  external int num_valuators;

  @ffi.UnsignedChar()
  external int mode;

  external ffi.Pointer<ffi.Int> valuators;
}

final class XKeyState extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.Short()
  external int num_keys;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> keys;
}

final class XButtonState extends ffi.Struct {
  @ffi.UnsignedChar()
  external int class$;

  @ffi.UnsignedChar()
  external int length;

  @ffi.Short()
  external int num_buttons;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> buttons;
}

const int NeedFunctionPrototypes = 1;

const int NeedVarargsPrototypes = 1;

const int NeedNestedPrototypes = 1;

const int FUNCPROTO = 15;

const int NeedWidePrototypes = 0;

const int XTestNumberEvents = 0;

const int XTestNumberErrors = 0;

const int XTestCurrentCursor = 1;

const int XTestMajorVersion = 2;

const int XTestMinorVersion = 2;

const String XTestExtensionName = 'XTEST';

const int XlibSpecificationRelease = 6;

const int _SYS_TYPES_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2Y = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 0;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 41;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_ATTR_T = 64;

const int __SIZEOF_PTHREAD_MUTEX_T = 48;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 8;

const int __SIZEOF_PTHREAD_CONDATTR_T = 8;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 8;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __have_pthread_attr_t = 1;

const int X_PROTOCOL = 11;

const int X_PROTOCOL_REVISION = 0;

const int None = 0;

const int ParentRelative = 1;

const int CopyFromParent = 0;

const int PointerWindow = 0;

const int InputFocus = 1;

const int PointerRoot = 1;

const int AnyPropertyType = 0;

const int AnyKey = 0;

const int AnyButton = 0;

const int AllTemporary = 0;

const int CurrentTime = 0;

const int NoSymbol = 0;

const int NoEventMask = 0;

const int KeyPressMask = 1;

const int KeyReleaseMask = 2;

const int ButtonPressMask = 4;

const int ButtonReleaseMask = 8;

const int EnterWindowMask = 16;

const int LeaveWindowMask = 32;

const int PointerMotionMask = 64;

const int PointerMotionHintMask = 128;

const int Button1MotionMask = 256;

const int Button2MotionMask = 512;

const int Button3MotionMask = 1024;

const int Button4MotionMask = 2048;

const int Button5MotionMask = 4096;

const int ButtonMotionMask = 8192;

const int KeymapStateMask = 16384;

const int ExposureMask = 32768;

const int VisibilityChangeMask = 65536;

const int StructureNotifyMask = 131072;

const int ResizeRedirectMask = 262144;

const int SubstructureNotifyMask = 524288;

const int SubstructureRedirectMask = 1048576;

const int FocusChangeMask = 2097152;

const int PropertyChangeMask = 4194304;

const int ColormapChangeMask = 8388608;

const int OwnerGrabButtonMask = 16777216;

const int KeyPress = 2;

const int KeyRelease = 3;

const int ButtonPress = 4;

const int ButtonRelease = 5;

const int MotionNotify = 6;

const int EnterNotify = 7;

const int LeaveNotify = 8;

const int FocusIn = 9;

const int FocusOut = 10;

const int KeymapNotify = 11;

const int Expose = 12;

const int GraphicsExpose = 13;

const int NoExpose = 14;

const int VisibilityNotify = 15;

const int CreateNotify = 16;

const int DestroyNotify = 17;

const int UnmapNotify = 18;

const int MapNotify = 19;

const int MapRequest = 20;

const int ReparentNotify = 21;

const int ConfigureNotify = 22;

const int ConfigureRequest = 23;

const int GravityNotify = 24;

const int ResizeRequest = 25;

const int CirculateNotify = 26;

const int CirculateRequest = 27;

const int PropertyNotify = 28;

const int SelectionClear = 29;

const int SelectionRequest = 30;

const int SelectionNotify = 31;

const int ColormapNotify = 32;

const int ClientMessage = 33;

const int MappingNotify = 34;

const int GenericEvent = 35;

const int LASTEvent = 36;

const int ShiftMask = 1;

const int LockMask = 2;

const int ControlMask = 4;

const int Mod1Mask = 8;

const int Mod2Mask = 16;

const int Mod3Mask = 32;

const int Mod4Mask = 64;

const int Mod5Mask = 128;

const int ShiftMapIndex = 0;

const int LockMapIndex = 1;

const int ControlMapIndex = 2;

const int Mod1MapIndex = 3;

const int Mod2MapIndex = 4;

const int Mod3MapIndex = 5;

const int Mod4MapIndex = 6;

const int Mod5MapIndex = 7;

const int Button1Mask = 256;

const int Button2Mask = 512;

const int Button3Mask = 1024;

const int Button4Mask = 2048;

const int Button5Mask = 4096;

const int AnyModifier = 32768;

const int Button1 = 1;

const int Button2 = 2;

const int Button3 = 3;

const int Button4 = 4;

const int Button5 = 5;

const int NotifyNormal = 0;

const int NotifyGrab = 1;

const int NotifyUngrab = 2;

const int NotifyWhileGrabbed = 3;

const int NotifyHint = 1;

const int NotifyAncestor = 0;

const int NotifyVirtual = 1;

const int NotifyInferior = 2;

const int NotifyNonlinear = 3;

const int NotifyNonlinearVirtual = 4;

const int NotifyPointer = 5;

const int NotifyPointerRoot = 6;

const int NotifyDetailNone = 7;

const int VisibilityUnobscured = 0;

const int VisibilityPartiallyObscured = 1;

const int VisibilityFullyObscured = 2;

const int PlaceOnTop = 0;

const int PlaceOnBottom = 1;

const int FamilyInternet = 0;

const int FamilyDECnet = 1;

const int FamilyChaos = 2;

const int FamilyInternet6 = 6;

const int FamilyServerInterpreted = 5;

const int PropertyNewValue = 0;

const int PropertyDelete = 1;

const int ColormapUninstalled = 0;

const int ColormapInstalled = 1;

const int GrabModeSync = 0;

const int GrabModeAsync = 1;

const int GrabSuccess = 0;

const int AlreadyGrabbed = 1;

const int GrabInvalidTime = 2;

const int GrabNotViewable = 3;

const int GrabFrozen = 4;

const int AsyncPointer = 0;

const int SyncPointer = 1;

const int ReplayPointer = 2;

const int AsyncKeyboard = 3;

const int SyncKeyboard = 4;

const int ReplayKeyboard = 5;

const int AsyncBoth = 6;

const int SyncBoth = 7;

const int RevertToNone = 0;

const int RevertToPointerRoot = 1;

const int RevertToParent = 2;

const int Success = 0;

const int BadRequest = 1;

const int BadValue = 2;

const int BadWindow = 3;

const int BadPixmap = 4;

const int BadAtom = 5;

const int BadCursor = 6;

const int BadFont = 7;

const int BadMatch = 8;

const int BadDrawable = 9;

const int BadAccess = 10;

const int BadAlloc = 11;

const int BadColor = 12;

const int BadGC = 13;

const int BadIDChoice = 14;

const int BadName = 15;

const int BadLength = 16;

const int BadImplementation = 17;

const int FirstExtensionError = 128;

const int LastExtensionError = 255;

const int InputOutput = 1;

const int InputOnly = 2;

const int CWBackPixmap = 1;

const int CWBackPixel = 2;

const int CWBorderPixmap = 4;

const int CWBorderPixel = 8;

const int CWBitGravity = 16;

const int CWWinGravity = 32;

const int CWBackingStore = 64;

const int CWBackingPlanes = 128;

const int CWBackingPixel = 256;

const int CWOverrideRedirect = 512;

const int CWSaveUnder = 1024;

const int CWEventMask = 2048;

const int CWDontPropagate = 4096;

const int CWColormap = 8192;

const int CWCursor = 16384;

const int CWX = 1;

const int CWY = 2;

const int CWWidth = 4;

const int CWHeight = 8;

const int CWBorderWidth = 16;

const int CWSibling = 32;

const int CWStackMode = 64;

const int ForgetGravity = 0;

const int NorthWestGravity = 1;

const int NorthGravity = 2;

const int NorthEastGravity = 3;

const int WestGravity = 4;

const int CenterGravity = 5;

const int EastGravity = 6;

const int SouthWestGravity = 7;

const int SouthGravity = 8;

const int SouthEastGravity = 9;

const int StaticGravity = 10;

const int UnmapGravity = 0;

const int NotUseful = 0;

const int WhenMapped = 1;

const int Always = 2;

const int IsUnmapped = 0;

const int IsUnviewable = 1;

const int IsViewable = 2;

const int SetModeInsert = 0;

const int SetModeDelete = 1;

const int DestroyAll = 0;

const int RetainPermanent = 1;

const int RetainTemporary = 2;

const int Above = 0;

const int Below = 1;

const int TopIf = 2;

const int BottomIf = 3;

const int Opposite = 4;

const int RaiseLowest = 0;

const int LowerHighest = 1;

const int PropModeReplace = 0;

const int PropModePrepend = 1;

const int PropModeAppend = 2;

const int GXclear = 0;

const int GXand = 1;

const int GXandReverse = 2;

const int GXcopy = 3;

const int GXandInverted = 4;

const int GXnoop = 5;

const int GXxor = 6;

const int GXor = 7;

const int GXnor = 8;

const int GXequiv = 9;

const int GXinvert = 10;

const int GXorReverse = 11;

const int GXcopyInverted = 12;

const int GXorInverted = 13;

const int GXnand = 14;

const int GXset = 15;

const int LineSolid = 0;

const int LineOnOffDash = 1;

const int LineDoubleDash = 2;

const int CapNotLast = 0;

const int CapButt = 1;

const int CapRound = 2;

const int CapProjecting = 3;

const int JoinMiter = 0;

const int JoinRound = 1;

const int JoinBevel = 2;

const int FillSolid = 0;

const int FillTiled = 1;

const int FillStippled = 2;

const int FillOpaqueStippled = 3;

const int EvenOddRule = 0;

const int WindingRule = 1;

const int ClipByChildren = 0;

const int IncludeInferiors = 1;

const int Unsorted = 0;

const int YSorted = 1;

const int YXSorted = 2;

const int YXBanded = 3;

const int CoordModeOrigin = 0;

const int CoordModePrevious = 1;

const int Complex = 0;

const int Nonconvex = 1;

const int Convex = 2;

const int ArcChord = 0;

const int ArcPieSlice = 1;

const int GCFunction = 1;

const int GCPlaneMask = 2;

const int GCForeground = 4;

const int GCBackground = 8;

const int GCLineWidth = 16;

const int GCLineStyle = 32;

const int GCCapStyle = 64;

const int GCJoinStyle = 128;

const int GCFillStyle = 256;

const int GCFillRule = 512;

const int GCTile = 1024;

const int GCStipple = 2048;

const int GCTileStipXOrigin = 4096;

const int GCTileStipYOrigin = 8192;

const int GCFont = 16384;

const int GCSubwindowMode = 32768;

const int GCGraphicsExposures = 65536;

const int GCClipXOrigin = 131072;

const int GCClipYOrigin = 262144;

const int GCClipMask = 524288;

const int GCDashOffset = 1048576;

const int GCDashList = 2097152;

const int GCArcMode = 4194304;

const int GCLastBit = 22;

const int FontLeftToRight = 0;

const int FontRightToLeft = 1;

const int FontChange = 255;

const int XYBitmap = 0;

const int XYPixmap = 1;

const int ZPixmap = 2;

const int AllocNone = 0;

const int AllocAll = 1;

const int DoRed = 1;

const int DoGreen = 2;

const int DoBlue = 4;

const int CursorShape = 0;

const int TileShape = 1;

const int StippleShape = 2;

const int AutoRepeatModeOff = 0;

const int AutoRepeatModeOn = 1;

const int AutoRepeatModeDefault = 2;

const int LedModeOff = 0;

const int LedModeOn = 1;

const int KBKeyClickPercent = 1;

const int KBBellPercent = 2;

const int KBBellPitch = 4;

const int KBBellDuration = 8;

const int KBLed = 16;

const int KBLedMode = 32;

const int KBKey = 64;

const int KBAutoRepeatMode = 128;

const int MappingSuccess = 0;

const int MappingBusy = 1;

const int MappingFailed = 2;

const int MappingModifier = 0;

const int MappingKeyboard = 1;

const int MappingPointer = 2;

const int DontPreferBlanking = 0;

const int PreferBlanking = 1;

const int DefaultBlanking = 2;

const int DisableScreenSaver = 0;

const int DisableScreenInterval = 0;

const int DontAllowExposures = 0;

const int AllowExposures = 1;

const int DefaultExposures = 2;

const int ScreenSaverReset = 0;

const int ScreenSaverActive = 1;

const int HostInsert = 0;

const int HostDelete = 1;

const int EnableAccess = 1;

const int DisableAccess = 0;

const int StaticGray = 0;

const int GrayScale = 1;

const int StaticColor = 2;

const int PseudoColor = 3;

const int TrueColor = 4;

const int DirectColor = 5;

const int LSBFirst = 0;

const int MSBFirst = 1;

const int NULL = 0;

const int X_HAVE_UTF8_STRING = 1;

const int True = 1;

const int False = 0;

const int QueuedAlready = 0;

const int QueuedAfterReading = 1;

const int QueuedAfterFlush = 2;

const int AllPlanes = -1;

const String XNRequiredCharSet = 'requiredCharSet';

const String XNQueryOrientation = 'queryOrientation';

const String XNBaseFontName = 'baseFontName';

const String XNOMAutomatic = 'omAutomatic';

const String XNMissingCharSet = 'missingCharSet';

const String XNDefaultString = 'defaultString';

const String XNOrientation = 'orientation';

const String XNDirectionalDependentDrawing = 'directionalDependentDrawing';

const String XNContextualDrawing = 'contextualDrawing';

const String XNFontInfo = 'fontInfo';

const int XIMPreeditArea = 1;

const int XIMPreeditCallbacks = 2;

const int XIMPreeditPosition = 4;

const int XIMPreeditNothing = 8;

const int XIMPreeditNone = 16;

const int XIMStatusArea = 256;

const int XIMStatusCallbacks = 512;

const int XIMStatusNothing = 1024;

const int XIMStatusNone = 2048;

const String XNVaNestedList = 'XNVaNestedList';

const String XNQueryInputStyle = 'queryInputStyle';

const String XNClientWindow = 'clientWindow';

const String XNInputStyle = 'inputStyle';

const String XNFocusWindow = 'focusWindow';

const String XNResourceName = 'resourceName';

const String XNResourceClass = 'resourceClass';

const String XNGeometryCallback = 'geometryCallback';

const String XNDestroyCallback = 'destroyCallback';

const String XNFilterEvents = 'filterEvents';

const String XNPreeditStartCallback = 'preeditStartCallback';

const String XNPreeditDoneCallback = 'preeditDoneCallback';

const String XNPreeditDrawCallback = 'preeditDrawCallback';

const String XNPreeditCaretCallback = 'preeditCaretCallback';

const String XNPreeditStateNotifyCallback = 'preeditStateNotifyCallback';

const String XNPreeditAttributes = 'preeditAttributes';

const String XNStatusStartCallback = 'statusStartCallback';

const String XNStatusDoneCallback = 'statusDoneCallback';

const String XNStatusDrawCallback = 'statusDrawCallback';

const String XNStatusAttributes = 'statusAttributes';

const String XNArea = 'area';

const String XNAreaNeeded = 'areaNeeded';

const String XNSpotLocation = 'spotLocation';

const String XNColormap = 'colorMap';

const String XNStdColormap = 'stdColorMap';

const String XNForeground = 'foreground';

const String XNBackground = 'background';

const String XNBackgroundPixmap = 'backgroundPixmap';

const String XNFontSet = 'fontSet';

const String XNLineSpace = 'lineSpace';

const String XNCursor = 'cursor';

const String XNQueryIMValuesList = 'queryIMValuesList';

const String XNQueryICValuesList = 'queryICValuesList';

const String XNVisiblePosition = 'visiblePosition';

const String XNR6PreeditCallback = 'r6PreeditCallback';

const String XNStringConversionCallback = 'stringConversionCallback';

const String XNStringConversion = 'stringConversion';

const String XNResetState = 'resetState';

const String XNHotKey = 'hotKey';

const String XNHotKeyState = 'hotKeyState';

const String XNPreeditState = 'preeditState';

const String XNSeparatorofNestedList = 'separatorofNestedList';

const int XBufferOverflow = -1;

const int XLookupNone = 1;

const int XLookupChars = 2;

const int XLookupKeySym = 3;

const int XLookupBoth = 4;

const int XIMReverse = 1;

const int XIMUnderline = 2;

const int XIMHighlight = 4;

const int XIMPrimary = 32;

const int XIMSecondary = 64;

const int XIMTertiary = 128;

const int XIMVisibleToForward = 256;

const int XIMVisibleToBackword = 512;

const int XIMVisibleToCenter = 1024;

const int XIMPreeditUnKnown = 0;

const int XIMPreeditEnable = 1;

const int XIMPreeditDisable = 2;

const int XIMInitialState = 1;

const int XIMPreserveState = 2;

const int XIMStringConversionLeftEdge = 1;

const int XIMStringConversionRightEdge = 2;

const int XIMStringConversionTopEdge = 4;

const int XIMStringConversionBottomEdge = 8;

const int XIMStringConversionConcealed = 16;

const int XIMStringConversionWrapped = 32;

const int XIMStringConversionBuffer = 1;

const int XIMStringConversionLine = 2;

const int XIMStringConversionWord = 3;

const int XIMStringConversionChar = 4;

const int XIMStringConversionSubstitution = 1;

const int XIMStringConversionRetrieval = 2;

const int XIMHotKeyStateON = 1;

const int XIMHotKeyStateOFF = 2;

const int sz_xGetExtensionVersionReq = 8;

const int sz_xGetExtensionVersionReply = 32;

const int sz_xListInputDevicesReq = 4;

const int sz_xListInputDevicesReply = 32;

const int sz_xOpenDeviceReq = 8;

const int sz_xOpenDeviceReply = 32;

const int sz_xCloseDeviceReq = 8;

const int sz_xSetDeviceModeReq = 8;

const int sz_xSetDeviceModeReply = 32;

const int sz_xSelectExtensionEventReq = 12;

const int sz_xGetSelectedExtensionEventsReq = 8;

const int sz_xGetSelectedExtensionEventsReply = 32;

const int sz_xChangeDeviceDontPropagateListReq = 12;

const int sz_xGetDeviceDontPropagateListReq = 8;

const int sz_xGetDeviceDontPropagateListReply = 32;

const int sz_xGetDeviceMotionEventsReq = 16;

const int sz_xGetDeviceMotionEventsReply = 32;

const int sz_xChangeKeyboardDeviceReq = 8;

const int sz_xChangeKeyboardDeviceReply = 32;

const int sz_xChangePointerDeviceReq = 8;

const int sz_xChangePointerDeviceReply = 32;

const int sz_xGrabDeviceReq = 20;

const int sz_xGrabDeviceReply = 32;

const int sz_xUngrabDeviceReq = 12;

const int sz_xGrabDeviceKeyReq = 20;

const int sz_xGrabDeviceKeyReply = 32;

const int sz_xUngrabDeviceKeyReq = 16;

const int sz_xGrabDeviceButtonReq = 20;

const int sz_xGrabDeviceButtonReply = 32;

const int sz_xUngrabDeviceButtonReq = 16;

const int sz_xAllowDeviceEventsReq = 12;

const int sz_xGetDeviceFocusReq = 8;

const int sz_xGetDeviceFocusReply = 32;

const int sz_xSetDeviceFocusReq = 16;

const int sz_xGetFeedbackControlReq = 8;

const int sz_xGetFeedbackControlReply = 32;

const int sz_xChangeFeedbackControlReq = 12;

const int sz_xGetDeviceKeyMappingReq = 8;

const int sz_xGetDeviceKeyMappingReply = 32;

const int sz_xChangeDeviceKeyMappingReq = 8;

const int sz_xGetDeviceModifierMappingReq = 8;

const int sz_xSetDeviceModifierMappingReq = 8;

const int sz_xSetDeviceModifierMappingReply = 32;

const int sz_xGetDeviceButtonMappingReq = 8;

const int sz_xGetDeviceButtonMappingReply = 32;

const int sz_xSetDeviceButtonMappingReq = 8;

const int sz_xSetDeviceButtonMappingReply = 32;

const int sz_xQueryDeviceStateReq = 8;

const int sz_xQueryDeviceStateReply = 32;

const int sz_xSendExtensionEventReq = 16;

const int sz_xDeviceBellReq = 8;

const int sz_xSetDeviceValuatorsReq = 8;

const int sz_xSetDeviceValuatorsReply = 32;

const int sz_xGetDeviceControlReq = 8;

const int sz_xGetDeviceControlReply = 32;

const int sz_xChangeDeviceControlReq = 8;

const int sz_xChangeDeviceControlReply = 32;

const int sz_xListDevicePropertiesReq = 8;

const int sz_xListDevicePropertiesReply = 32;

const int sz_xChangeDevicePropertyReq = 20;

const int sz_xDeleteDevicePropertyReq = 12;

const int sz_xGetDevicePropertyReq = 24;

const int sz_xGetDevicePropertyReply = 32;

const String INAME = 'XInputExtension';

const String XI_KEYBOARD = 'KEYBOARD';

const String XI_MOUSE = 'MOUSE';

const String XI_TABLET = 'TABLET';

const String XI_TOUCHSCREEN = 'TOUCHSCREEN';

const String XI_TOUCHPAD = 'TOUCHPAD';

const String XI_BARCODE = 'BARCODE';

const String XI_BUTTONBOX = 'BUTTONBOX';

const String XI_KNOB_BOX = 'KNOB_BOX';

const String XI_ONE_KNOB = 'ONE_KNOB';

const String XI_NINE_KNOB = 'NINE_KNOB';

const String XI_TRACKBALL = 'TRACKBALL';

const String XI_QUADRATURE = 'QUADRATURE';

const String XI_ID_MODULE = 'ID_MODULE';

const String XI_SPACEBALL = 'SPACEBALL';

const String XI_DATAGLOVE = 'DATAGLOVE';

const String XI_EYETRACKER = 'EYETRACKER';

const String XI_CURSORKEYS = 'CURSORKEYS';

const String XI_FOOTMOUSE = 'FOOTMOUSE';

const String XI_JOYSTICK = 'JOYSTICK';

const int Dont_Check = 0;

const int XInput_Initial_Release = 1;

const int XInput_Add_XDeviceBell = 2;

const int XInput_Add_XSetDeviceValuators = 3;

const int XInput_Add_XChangeDeviceControl = 4;

const int XInput_Add_DevicePresenceNotify = 5;

const int XInput_Add_DeviceProperties = 6;

const int XI_Absent = 0;

const int XI_Present = 1;

const int XI_Initial_Release_Major = 1;

const int XI_Initial_Release_Minor = 0;

const int XI_Add_XDeviceBell_Major = 1;

const int XI_Add_XDeviceBell_Minor = 1;

const int XI_Add_XSetDeviceValuators_Major = 1;

const int XI_Add_XSetDeviceValuators_Minor = 2;

const int XI_Add_XChangeDeviceControl_Major = 1;

const int XI_Add_XChangeDeviceControl_Minor = 3;

const int XI_Add_DevicePresenceNotify_Major = 1;

const int XI_Add_DevicePresenceNotify_Minor = 4;

const int XI_Add_DeviceProperties_Major = 1;

const int XI_Add_DeviceProperties_Minor = 5;

const int DEVICE_RESOLUTION = 1;

const int DEVICE_ABS_CALIB = 2;

const int DEVICE_CORE = 3;

const int DEVICE_ENABLE = 4;

const int DEVICE_ABS_AREA = 5;

const int NoSuchExtension = 1;

const int COUNT = 0;

const int CREATE = 1;

const int NewPointer = 0;

const int NewKeyboard = 1;

const int XPOINTER = 0;

const int XKEYBOARD = 1;

const int UseXKeyboard = 255;

const int IsXPointer = 0;

const int IsXKeyboard = 1;

const int IsXExtensionDevice = 2;

const int IsXExtensionKeyboard = 3;

const int IsXExtensionPointer = 4;

const int AsyncThisDevice = 0;

const int SyncThisDevice = 1;

const int ReplayThisDevice = 2;

const int AsyncOtherDevices = 3;

const int AsyncAll = 4;

const int SyncAll = 5;

const int FollowKeyboard = 3;

const int RevertToFollowKeyboard = 3;

const int DvAccelNum = 1;

const int DvAccelDenom = 2;

const int DvThreshold = 4;

const int DvKeyClickPercent = 1;

const int DvPercent = 2;

const int DvPitch = 4;

const int DvDuration = 8;

const int DvLed = 16;

const int DvLedMode = 32;

const int DvKey = 64;

const int DvAutoRepeatMode = 128;

const int DvString = 1;

const int DvInteger = 1;

const int DeviceMode = 1;

const int Relative = 0;

const int Absolute = 1;

const int ProximityState = 2;

const int InProximity = 0;

const int OutOfProximity = 2;

const int AddToList = 0;

const int DeleteFromList = 1;

const int KeyClass = 0;

const int ButtonClass = 1;

const int ValuatorClass = 2;

const int FeedbackClass = 3;

const int ProximityClass = 4;

const int FocusClass = 5;

const int OtherClass = 6;

const int AttachClass = 7;

const int KbdFeedbackClass = 0;

const int PtrFeedbackClass = 1;

const int StringFeedbackClass = 2;

const int IntegerFeedbackClass = 3;

const int LedFeedbackClass = 4;

const int BellFeedbackClass = 5;

const int _devicePointerMotionHint = 0;

const int _deviceButton1Motion = 1;

const int _deviceButton2Motion = 2;

const int _deviceButton3Motion = 3;

const int _deviceButton4Motion = 4;

const int _deviceButton5Motion = 5;

const int _deviceButtonMotion = 6;

const int _deviceButtonGrab = 7;

const int _deviceOwnerGrabButton = 8;

const int _noExtensionEvent = 9;

const int _devicePresence = 0;

const int _deviceEnter = 0;

const int _deviceLeave = 1;

const int DeviceAdded = 0;

const int DeviceRemoved = 1;

const int DeviceEnabled = 2;

const int DeviceDisabled = 3;

const int DeviceUnrecoverable = 4;

const int DeviceControlChanged = 5;

const int XI_BadDevice = 0;

const int XI_BadEvent = 1;

const int XI_BadMode = 2;

const int XI_DeviceBusy = 3;

const int XI_BadClass = 4;

const int _deviceKeyPress = 0;

const int _deviceKeyRelease = 1;

const int _deviceButtonPress = 0;

const int _deviceButtonRelease = 1;

const int _deviceMotionNotify = 0;

const int _deviceFocusIn = 0;

const int _deviceFocusOut = 1;

const int _proximityIn = 0;

const int _proximityOut = 1;

const int _deviceStateNotify = 0;

const int _deviceMappingNotify = 1;

const int _changeDeviceNotify = 2;

const int _propertyNotify = 6;
